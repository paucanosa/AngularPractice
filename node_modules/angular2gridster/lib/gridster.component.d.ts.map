{"version":3,"file":"gridster.component.d.ts","sources":["gridster.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, AfterContentInit, OnDestroy, ElementRef, NgZone, EventEmitter } from '@angular/core';\nimport { GridsterService } from './gridster.service';\nimport { IGridsterOptions } from './IGridsterOptions';\nimport { IGridsterDraggableOptions } from './IGridsterDraggableOptions';\nimport { GridsterPrototypeService } from './gridster-prototype/gridster-prototype.service';\nimport { GridListItem } from './gridList/GridListItem';\nimport { GridsterOptions } from './GridsterOptions';\nexport declare class GridsterComponent implements OnInit, AfterContentInit, OnDestroy {\n    private zone;\n    private gridsterPrototype;\n    options: IGridsterOptions;\n    optionsChange: EventEmitter<any>;\n    ready: EventEmitter<any>;\n    reflow: EventEmitter<any>;\n    prototypeDrop: EventEmitter<{\n        item: GridListItem;\n    }>;\n    prototypeEnter: EventEmitter<{\n        item: GridListItem;\n    }>;\n    prototypeOut: EventEmitter<{\n        item: GridListItem;\n    }>;\n    draggableOptions: IGridsterDraggableOptions;\n    parent: GridsterComponent;\n    $positionHighlight: any;\n    isDragging: boolean;\n    isResizing: boolean;\n    isReady: boolean;\n    gridster: GridsterService;\n    $element: HTMLElement;\n    gridsterOptions: GridsterOptions;\n    isPrototypeEntered: boolean;\n    private isDisabled;\n    private subscription;\n    constructor(zone: NgZone, elementRef: ElementRef, gridster: GridsterService, gridsterPrototype: GridsterPrototypeService);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Change gridster config option and rebuild\n     * @param string name\n     * @param any value\n     * @return GridsterComponent\n     */\n    setOption(name: string, value: any): this;\n    reload(): this;\n    reflowGridster(isInit?: boolean): void;\n    updateGridsterElementData(): void;\n    setReady(): void;\n    adjustItemsHeightToContent(scrollableItemElementSelector?: string): void;\n    disable(item: any): void;\n    enable(): void;\n    private getScrollPositionFromParents;\n    /**\n     * Connect gridster prototype item to gridster dragging hooks (onStart, onDrag, onStop).\n     */\n    private connectGridsterPrototype;\n    private enableDraggable;\n    private disableDraggable;\n    private enableResizable;\n    private disableResizable;\n}\n"]}