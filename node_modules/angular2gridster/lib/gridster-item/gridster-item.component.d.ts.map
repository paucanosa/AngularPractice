{"version":3,"file":"gridster-item.component.d.ts","sources":["gridster-item.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, ElementRef, EventEmitter, SimpleChanges, OnChanges, OnDestroy, AfterViewInit, NgZone } from '@angular/core';\nimport { GridsterService } from '../gridster.service';\nimport { GridsterPrototypeService } from '../gridster-prototype/gridster-prototype.service';\nimport { GridListItem } from '../gridList/GridListItem';\nexport declare class GridsterItemComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n    private zone;\n    private gridsterPrototypeService;\n    x: number;\n    xChange: EventEmitter<number>;\n    y: number;\n    yChange: EventEmitter<number>;\n    xSm: number;\n    xSmChange: EventEmitter<number>;\n    ySm: number;\n    ySmChange: EventEmitter<number>;\n    xMd: number;\n    xMdChange: EventEmitter<number>;\n    yMd: number;\n    yMdChange: EventEmitter<number>;\n    xLg: number;\n    xLgChange: EventEmitter<number>;\n    yLg: number;\n    yLgChange: EventEmitter<number>;\n    xXl: number;\n    xXlChange: EventEmitter<number>;\n    yXl: number;\n    yXlChange: EventEmitter<number>;\n    w: number;\n    wChange: EventEmitter<number>;\n    h: number;\n    hChange: EventEmitter<number>;\n    wSm: number;\n    wSmChange: EventEmitter<number>;\n    hSm: number;\n    hSmChange: EventEmitter<number>;\n    wMd: number;\n    wMdChange: EventEmitter<number>;\n    hMd: number;\n    hMdChange: EventEmitter<number>;\n    wLg: number;\n    wLgChange: EventEmitter<number>;\n    hLg: number;\n    hLgChange: EventEmitter<number>;\n    wXl: number;\n    wXlChange: EventEmitter<number>;\n    hXl: number;\n    hXlChange: EventEmitter<number>;\n    change: EventEmitter<any>;\n    start: EventEmitter<any>;\n    end: EventEmitter<any>;\n    dragAndDrop: boolean;\n    resizable: boolean;\n    options: any;\n    autoSize: boolean;\n    isDragging: boolean;\n    isResizing: boolean;\n    $element: HTMLElement;\n    elementRef: ElementRef;\n    /**\n     * Gridster provider service\n     */\n    gridster: GridsterService;\n    item: GridListItem;\n    set positionX(value: number);\n    get positionX(): number;\n    set positionY(value: number);\n    get positionY(): number;\n    private _positionX;\n    private _positionY;\n    private defaultOptions;\n    private subscriptions;\n    private dragSubscriptions;\n    private resizeSubscriptions;\n    constructor(zone: NgZone, gridsterPrototypeService: GridsterPrototypeService, elementRef: ElementRef, gridster: GridsterService);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    updateElemenetPosition(): void;\n    setPositionsOnItem(): void;\n    enableResizable(): void;\n    disableResizable(): void;\n    enableDragDrop(): void;\n    disableDraggable(): void;\n    private getResizeHandlers;\n    private getDraggableOptions;\n    private getResizableOptions;\n    private hasResizableHandle;\n    private setPositionsForGrid;\n    private findPosition;\n    private createResizeStartObject;\n    private onEnd;\n    private onStart;\n    /**\n     * Assign class for short while to prevent animation of grid item component\n     */\n    private preventAnimation;\n    private getResizeDirection;\n    private resizeElement;\n    private resizeToNorth;\n    private resizeToWest;\n    private resizeToEast;\n    private resizeToSouth;\n    private setMinHeight;\n    private setMinWidth;\n    private setMaxHeight;\n    private setMaxWidth;\n}\n"]}