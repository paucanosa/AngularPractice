{"version":3,"file":"gridster-prototype.service.d.ts","sources":["gridster-prototype.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { GridsterService } from '../gridster.service';\nimport { GridsterItemPrototypeDirective } from './gridster-item-prototype.directive';\nimport { DraggableEvent } from '../utils/DraggableEvent';\nexport declare class GridsterPrototypeService {\n    private isDragging;\n    private dragSubject;\n    private dragStartSubject;\n    private dragStopSubject;\n    constructor();\n    observeDropOver(gridster: GridsterService): Observable<any>;\n    observeDropOut(gridster: GridsterService): Observable<any>;\n    observeDragOver(gridster: GridsterService): {\n        dragOver: Observable<GridsterItemPrototypeDirective>;\n        dragEnter: Observable<GridsterItemPrototypeDirective>;\n        dragOut: Observable<GridsterItemPrototypeDirective>;\n    };\n    dragItemStart(item: GridsterItemPrototypeDirective, event: DraggableEvent): void;\n    dragItemStop(item: GridsterItemPrototypeDirective, event: DraggableEvent): void;\n    updatePrototypePosition(item: GridsterItemPrototypeDirective, event: DraggableEvent): void;\n    /**\n     * Creates observable that is fired on dragging over gridster container.\n     */\n    private createDragOverObservable;\n    /**\n     * Creates observable that is fired on drag enter gridster container.\n     */\n    private createDragEnterObservable;\n    /**\n     * Creates observable that is fired on drag out gridster container.\n     */\n    private createDragOutObservable;\n    /**\n     * Checks whether \"element\" position fits inside \"containerEl\" position.\n     * It checks if \"element\" is totally covered by \"containerEl\" area.\n     */\n    private isOverGridster;\n}\n"]}