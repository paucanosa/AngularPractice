{"version":3,"file":"gridster-item-prototype.directive.d.ts","sources":["gridster-item-prototype.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnInit, OnDestroy, NgZone } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { GridsterPrototypeService } from './gridster-prototype.service';\nimport { GridListItem } from '../gridList/GridListItem';\nimport { GridsterService } from '../gridster.service';\nexport declare class GridsterItemPrototypeDirective implements OnInit, OnDestroy {\n    private zone;\n    private elementRef;\n    private gridsterPrototype;\n    drop: EventEmitter<any>;\n    start: EventEmitter<any>;\n    cancel: EventEmitter<any>;\n    enter: EventEmitter<any>;\n    out: EventEmitter<any>;\n    data: any;\n    config: any;\n    x: number;\n    y: number;\n    w: number;\n    wSm: number;\n    wMd: number;\n    wLg: number;\n    wXl: number;\n    h: number;\n    hSm: number;\n    hMd: number;\n    hLg: number;\n    hXl: number;\n    positionX: number;\n    positionY: number;\n    autoSize: boolean;\n    $element: HTMLElement;\n    /**\n     * Mouse drag observable\n     */\n    drag: Observable<any>;\n    /**\n     * Subscribtion for drag observable\n     */\n    dragSubscription: Subscription;\n    isDragging: boolean;\n    item: GridListItem;\n    containerRectange: ClientRect;\n    private dragContextGridster;\n    private parentRect;\n    private parentOffset;\n    private subscribtions;\n    get dragAndDrop(): boolean;\n    get gridster(): GridsterService;\n    constructor(zone: NgZone, elementRef: ElementRef, gridsterPrototype: GridsterPrototypeService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    onDrop(gridster: GridsterService): void;\n    onCancel(): void;\n    onEnter(gridster: GridsterService): void;\n    onOver(gridster: GridsterService): void;\n    onOut(gridster: GridsterService): void;\n    getPositionToGridster(gridster: GridsterService): {\n        y: number;\n        x: number;\n    };\n    setDragContextGridster(gridster: GridsterService): void;\n    private getContainerCoordsToGridster;\n    private enableDragDrop;\n    private setElementPosition;\n    private updateParentElementData;\n    private onStart;\n    private onDrag;\n    private onStop;\n    private provideDragElement;\n    private fixStylesForRelativeElement;\n    /**\n     * When element is cloned and append to body it should have position absolute and coords set by original\n     * relative prototype element position.\n     */\n    private fixStylesForBodyHelper;\n}\n"]}