{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular2gridster/lib/utils/utils.ts","ng://angular2gridster/lib/gridList/gridList.ts","ng://angular2gridster/lib/gridster.service.ts","ng://angular2gridster/lib/gridster-prototype/gridster-prototype.service.ts","ng://angular2gridster/lib/GridsterOptions.ts","ng://angular2gridster/lib/gridster.component.ts","ng://angular2gridster/lib/gridList/GridListItem.ts","ng://angular2gridster/lib/utils/DraggableEvent.ts","ng://angular2gridster/lib/utils/draggable.ts","ng://angular2gridster/lib/gridster-item/gridster-item.component.ts","ng://angular2gridster/lib/gridster-prototype/gridster-item-prototype.directive.ts","ng://angular2gridster/lib/gridster.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","e","ar","push","error","__spread","concat","utils","$element","position","style","left","x","top","y","translate","document","empty","window","getSelection","removeAllRanges","element","containerEl","containerRect","getBoundingClientRect","elRect","right","bottom","elWidth","elHeight","event","pageX","pageY","styleObj","getComputedStyle","parseFloat","getPropertyValue","parentElement","parentElementRect","elementRect","node","regex","parents","_node","ps","parentNode","prop","scroll","test","overflow","HTMLElement","SVGElement","scrollingElement","documentElement","scrollParent","GridCol","lanes","GridList","items","options","adjustSizeOfItems","generateGrid","toString","item","j","widthOfGrid","grid","output","border","padNumber","indexOf","setOption","name","resetGrid","markItemPositionToGrid","resizeGrid","currentColumn","sortItemsByPosition","getItemPosition","updateItemPosition","findPositionForItem","Math","max","pullItemsToLeft","start","fixedRow","undefined","itemFitsAtPosition","newCol","newRow","moveAndResize","newPosition","size","w","h","width","height","updateItemSize","resolveCollisions","moveItemToPosition","resizeItem","getChangedItems","initialItems","breakpoint","map","changes","oldValues","initItem","find","initItm","isNew","oldX","getValueX","oldY","getValueY","getValueW","getValueH","filter","itemChange","tryToResolveCollisionsLocally","floating","getItemsCollidingWithItem","pushCollidingItems","fixedItem","_this","isItemFloating","forEach","direction","fixedPosition","dragAndDrop","findLeftMostPositionForItem","isOverFixedArea","itemData","checkItemAboveEmptyArea","itemPrototype","checkItemsInArea","fixItemsPositions","validItems","itemComponent","isItemValidForGrid","invalidItems","gridList","copyForBreakpoint","itemCopy","setItemPosition","itm","cachedItem","cachedItm","setValueX","setValueY","setValueW","setValueH","autoSize","deleteItemPositionFromGrid","isDragging","slice","reduce","isFloating","cellItem","min","findDefaultPositionHorizontal","_b","_c","col","colIdx","rowIdx","findDefaultPositionVertical","row","rowStart","rowEnd","colStart","colEnd","sort","item1","item2","position1","position2","ensureColumns","N","collidingItems","itemsAreColliding","leftOfItem","rightOfItem","aboveOfItem","belowOfItem","_gridList","copy","collidingItem","collidingPosition","idx","tail","otherItem","otherPosition","findItemByPosition","getItemByAttribute","nr","prefix","GridsterService","_items","_itemsMap","disabledItems","debounceRenderSubject","Subject","itemRemoveSubject","isInit","pipe","debounceTime","subscribe","render","updateCachedItems","isInitialized","registerItem","init","gridsterComponent","draggableOptions","gridsterOptions","updateMaxItemSize","$positionHighlight","removePositionHighlight","initGridList","setTimeout","copyItems","reflowGridster","setReady","applySizeToItems","applyPositionToItems","refreshLines","reflow","calculateCellSize","responsiveSizes","basicOptions","responsiveOptions","removeItem","splice","removeItemFromCache","onResizeStart","currentElement","_maxGridCols","highlightPositionForItem","isResizing","onResizeDrag","newSize","snapItemSizeToGrid","sizeChanged","dragSizeChanged","snapItemPositionToGrid","positionChanged","dragPositionChanged","restoreCachedItems","previousDragPosition","previousDragSize","onResizeStop","onStart","updateGridsterElementData","onDrag","cancel","onDragOut","onStop","cellHeight","calculateCellHeight","cellWidth","widthHeightRatio","calculateCellWidth","heightToFontSizeRatio","_fontSize","increaseGridsterSize","shrink","isCurrentElement","applyPosition","child","firstChild","increaseWidthWith","maxItemWidth","increaseHeightWith","maxItemHeight","gridsterContainer","lines","visible","always","linesColor","color","linesBgColor","backgroundColor","linesWidth","bgPosition","backgroundSize","backgroundPosition","backgroundImage","keys","isValidGridItem","applySize","itemSize","parseInt","colSize","round","rowSize","generateItemPosition","coords","getPositionToGridster","positionX","positionY","calculateSize","calculatePosition","display","triggerOnChange","triggerChangeX","triggerChangeY","triggerChangeW","triggerChangeH","change","emit","Injectable","GridsterPrototypeService","dragSubject","dragStartSubject","dragStopSubject","observeDropOver","gridster","data","gridsterEl","querySelectorAll","isOverGridster","nestedGridsterEl","tap","onDrop","observeDropOut","onCancel","observeDragOver","over","isOver","isDrop","drop","dragExt","merge","scan","prev","isEnter","isOut","share","dragEnter","createDragEnterObservable","dragOut","createDragOutObservable","dragOver","switchMap","takeUntil","dragItemStart","dragItemStop","updatePrototypePosition","createDragOverObservable","dragIsOver","onOver","onEnter","onOut","el","parentItem","closest","tolerance","GridsterOptions","config","gridsterElement","defaults","responsiveView","responsiveToParent","resizable","useCSSTransforms","breakpointsMap","sm","md","lg","xl","responsiveContainer","extendResponsiveOptions","of","getOptionsByWidth","getElementWidth","fromEvent","responsiveDebounce","distinctUntilChanged","minWidth","curr","innerWidth","clientWidth","body","GridsterComponent","zone","elementRef","gridsterPrototype","optionsChange","EventEmitter","ready","prototypeDrop","prototypeEnter","prototypeOut","isReady","isPrototypeEntered","isDisabled","subscription","Subscription","nativeElement","ngOnInit","classList","add","reload","runOutsideAngular","passive","scrollableContainer","ngAfterContentInit","connectGridsterPrototype","ngOnDestroy","unsubscribe","enableDraggable","disableDraggable","enableResizable","disableResizable","gridsterScrollData","getScrollPositionFromParents","gridsterRect","adjustItemsHeightToContent","scrollableItemElementSelector","scrollEl","querySelector","contentEl","lastElementChild","scrollElDistance","scrollElRect","contentHeight","ceil","disable","itemIdx","enable","scrollTop","scrollLeft","dropOverObservable","publish","dragObservable","setDragContextGridster","parent","connect","enableDragDrop","NgZone","ElementRef","Input","Output","ViewChild","static","HostBinding","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","GridListItem","getItem","setFromGridsterItem","isItemSet","Error","setFromGridsterItemPrototype","setFromObjectLiteral","itemObject","getXProperty","getYProperty","getWProperty","getHProperty","hasPositions","updateElemenetPosition","X_PROPERTY_MAP","Y_PROPERTY_MAP","W_PROPERTY_MAP","H_PROPERTY_MAP","BREAKPOINTS","DraggableEvent","touches","touchEvent","setDataFromTouchEvent","mouseEvent","setDataFromMouseEvent","isTouchEvent","pauseEvent","stopPropagation","preventDefault","cancelBubble","returnValue","getRelativeCoordinates","container","pageYOffset","pageXOffset","rect","clientX","clientY","type","touch","changedTouches","Draggable","mousemove","mouseup","handlerClass","scrollEdge","scrollDirection","autoScrollingInterval","mousedown","dragStart","createDragStartObservable","dragMove","createDragMoveObservable","dragStop","createDragStopObservable","fixProblemWithDnDForIE","requestAnimationFrame","callback","cancelAnimationFrame","cafID","clearTimeout","isDragingByHandler","activeElement","blur","startEvent","mm","moveEvent","inRange","take","addTouchActionNone","skip","val","startScroll","removeTouchActionNone","raf","scrollContainer","getScrollContainer","startScrollForContainer","startScrollForWindow","startScrollVerticallyForContainer","startScrollHorizontallyForContainer","getOffset","startAutoScrolling","SCROLL_SPEED","startScrollVerticallyForWindow","startScrollHorizontallyForWindow","innerHeight","nodeOuterHeight","scrollHeight","RegExp","tagName","amount","bind","getScroll","scrollProp","offsetProp","clientHeight","isValidDragHandler","hasElementWithClass","targetEl","toLowerCase","range","abs","className","contains","isTouchDevice","isIEorEdge","navigator","maxTouchPoints","ua","userAgent","msie","substring","rv","edge","GridsterItemComponent","gridsterPrototypeService","xChange","yChange","xSmChange","ySmChange","xMdChange","yMdChange","xLgChange","yLgChange","xXlChange","yXlChange","wChange","hChange","wSmChange","hSmChange","wMdChange","hMdChange","wLgChange","hLgChange","wXlChange","hXlChange","end","defaultOptions","minHeight","maxWidth","Infinity","maxHeight","defaultWidth","defaultHeight","subscriptions","dragSubscriptions","resizeSubscriptions","preventAnimation","_positionX","_positionY","wSm","hSm","wMd","hMd","wLg","hLg","wXl","hXl","setPositionsOnItem","ngAfterViewInit","ngOnChanges","rerender","propName","isFirstChange","currentValue","sub","setPositionsForGrid","getResizeHandlers","handler","getResizeDirection","hasResizableHandle","startData","cursorToElementPosition","draggable","getResizableOptions","dragStartSub","run","createResizeStartObject","dragSub","scrollData","resizeElement","scrollDiffX","scrollDiffY","dragStopSub","onEnd","getDraggableOptions","children","resizableOptions","isItemResizable","resizeHandles","findPosition","minX","maxX","minY","maxY","minW","maxW","minH","maxH","actionType","action","remove","match","split","resizeToNorth","resizeToWest","resizeToEast","resizeToSouth","setMinHeight","setMaxHeight","setMinWidth","setMaxWidth","Inject","args","GridsterItemPrototypeDirective","enter","out","subscribtions","dragContextGridster","helper","removeChild","relativeContainerCoords","getContainerCoordsToGridster","parentRect","provideDragElement","containerRectange","updateParentElementData","setElementPosition","scrollSub","parentOffset","offsetLeft","offsetTop","pointerEvents","dragElement","cloneNode","appendChild","fixStylesForBodyHelper","fixStylesForRelativeElement","bodyRect","Directive","GridsterModule","forRoot","ngModule","GridsterModule_1","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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Rsd,EAAAA,yDACStd,EAAA,CAATud,EAAAA,gEAEQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEACQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEAEQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEACQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEAEQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEACQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEAEQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEACQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEAGQvd,EAAA,CAARsd,EAAAA,yDACStd,EAAA,CAATud,EAAAA,gEACQvd,EAAA,CAARsd,EAAAA,yDACStd,EAAA,CAATud,EAAAA,gEAEQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEACQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEAEQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEACQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEAEQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEACQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEAEQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEACQvd,EAAA,CAARsd,EAAAA,2DACStd,EAAA,CAATud,EAAAA,kEAESvd,EAAA,CAATud,EAAAA,+DACSvd,EAAA,CAATud,EAAAA,8DACSvd,EAAA,CAATud,EAAAA,4DAEQvd,EAAA,CAARsd,EAAAA,mEACQtd,EAAA,CAARsd,EAAAA,iEAEQtd,EAAA,CAARsd,EAAAA,+DAIiCtd,EAAA,CAAjC0d,EAAAA,YAAY,+EACqB1d,EAAA,CAAjC0d,EAAAA,YAAY,+EAhEJ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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\nimport { DraggableEvent } from './DraggableEvent';\n\nexport const utils = {\n    setCssElementPosition: function ($element: HTMLElement, position: {x: number, y: number}) {\n        $element.style.left = position.x + 'px';\n        $element.style.top = position.y + 'px';\n    },\n    resetCSSElementPosition: function ($element: HTMLElement) {\n        $element.style.left = '';\n        $element.style.top = '';\n    },\n    setTransform: function ($element: HTMLElement, position: {x: number, y: number}) {\n        const left = position.x;\n        const top = position.y;\n\n        // Replace unitless items with px\n        const translate = `translate(${left}px,${top}px)`;\n\n        $element.style['transform'] = translate;\n        $element.style['WebkitTransform'] = translate;\n        $element.style['MozTransform'] = translate;\n        $element.style['msTransform'] = translate;\n        $element.style['OTransform'] = translate;\n    },\n    resetTransform: function ($element: HTMLElement) {\n        $element.style['transform'] = '';\n        $element.style['WebkitTransform'] = '';\n        $element.style['MozTransform'] = '';\n        $element.style['msTransform'] = '';\n        $element.style['OTransform'] = '';\n    },\n    clearSelection: () => {\n        if (document['selection']) {\n            document['selection'].empty();\n        } else if (window.getSelection) {\n            window.getSelection().removeAllRanges();\n        }\n    },\n    isElementFitContainer: function (element: HTMLElement, containerEl: HTMLElement): boolean {\n        const containerRect = containerEl.getBoundingClientRect();\n        const elRect = element.getBoundingClientRect();\n\n        return elRect.left > containerRect.left &&\n            elRect.right < containerRect.right &&\n            elRect.top > containerRect.top &&\n            elRect.bottom < containerRect.bottom;\n    },\n    isElementIntersectContainer: function (element: HTMLElement, containerEl: HTMLElement): boolean {\n        const containerRect = containerEl.getBoundingClientRect();\n        const elRect = element.getBoundingClientRect();\n\n        const elWidth = elRect.right - elRect.left;\n        const elHeight = elRect.bottom - elRect.top;\n\n        return (elRect.left + (elWidth / 2)) > containerRect.left &&\n            (elRect.right - (elWidth / 2)) < containerRect.right &&\n            (elRect.top + (elHeight / 2)) > containerRect.top &&\n            (elRect.bottom - (elHeight / 2)) < containerRect.bottom;\n    },\n    isElementTouchContainer: function (element: HTMLElement, containerEl: HTMLElement): boolean {\n        const containerRect = containerEl.getBoundingClientRect();\n        const elRect = element.getBoundingClientRect();\n\n        return elRect.right > containerRect.left &&\n            elRect.bottom > containerRect.top &&\n            elRect.left < containerRect.right &&\n            elRect.top < containerRect.bottom;\n    },\n    isCursorAboveElement: function (event: DraggableEvent, element): boolean {\n        const elRect = element.getBoundingClientRect();\n\n        return event.pageX > elRect.left &&\n            event.pageX < elRect.right &&\n            event.pageY > elRect.top &&\n            event.pageY < elRect.bottom;\n    },\n    getElementOuterHeight: function ($element: HTMLElement) {\n        const styleObj = window.getComputedStyle($element);\n        // NOTE: Manually calculating height because IE's `clientHeight` isn't always\n        // reliable.\n        return parseFloat(styleObj.getPropertyValue('height')) +\n            parseFloat(styleObj.getPropertyValue('padding-top')) +\n            parseFloat(styleObj.getPropertyValue('padding-bottom'));\n    },\n    getRelativeCoordinates: (element, parentElement): {top: number, left: number} => {\n        const parentElementRect = parentElement.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n\n        return {\n            top: elementRect.top - parentElementRect.top,\n            left: elementRect.left - parentElementRect.left\n        };\n    },\n    getScrollableContainer(node) {\n        const regex = /(auto|scroll)/;\n        const parents = (_node, ps) => {\n            if (_node.parentNode === null) {\n                return ps;\n            }\n            return parents(_node.parentNode, ps.concat([_node]));\n        };\n\n        const style = (_node, prop) => {\n            return getComputedStyle(_node, null).getPropertyValue(prop);\n        };\n        const overflow = _node => {\n            return (\n                style(_node, 'overflow') + style(_node, 'overflow-y') + style(_node, 'overflow-x')\n            );\n        };\n        const scroll = _node => regex.test(overflow(_node));\n\n        /* eslint-disable consistent-return */\n        const scrollParent = _node => {\n            if (!(_node instanceof HTMLElement || _node instanceof SVGElement)) {\n                return;\n            }\n\n            const ps = parents(_node.parentNode, []);\n\n            for (let i = 0; i < ps.length; i += 1) {\n                if (scroll(ps[i])) {\n                    return ps[i];\n                }\n            }\n\n            return document.scrollingElement || document.documentElement;\n        };\n\n        return scrollParent(node);\n    }\n};\n","import { GridListItem } from './GridListItem';\nimport { IGridsterOptions } from '../IGridsterOptions';\n\nconst GridCol = function(lanes) {\n    for (let i = 0; i < lanes; i++) {\n        this.push(null);\n    }\n};\n// Extend the Array prototype\nGridCol.prototype = [];\n\n/**\n * A GridList manages the two-dimensional positions from a list of items,\n * within a virtual matrix.\n *\n * The GridList's main function is to convert the item positions from one\n * grid size to another, maintaining as much of their order as possible.\n *\n * The GridList's second function is to handle collisions when moving an item\n * over another.\n *\n * The positioning algorithm places items in columns. Starting from left to\n * right, going through each column top to bottom.\n *\n * The size of an item is expressed using the number of cols and rows it\n * takes up within the grid (w and h)\n *\n * The position of an item is express using the col and row position within\n * the grid (x and y)\n *\n * An item is an object of structure:\n * {\n *   w: 3, h: 1,\n *   x: 0, y: 1\n * }\n */\nexport class GridList {\n    items: Array<GridListItem>;\n    grid: Array<Array<GridListItem>>;\n\n    options: IGridsterOptions;\n\n    constructor(items: Array<GridListItem>, options: IGridsterOptions) {\n        this.options = options;\n\n        this.items = items;\n\n        this.adjustSizeOfItems();\n\n        this.generateGrid();\n    }\n\n    /**\n     * Illustrates grid as text-based table, using a number identifier for each\n     * item. E.g.\n     *\n     *  #|  0  1  2  3  4  5  6  7  8  9 10 11 12 13\n     *  --------------------------------------------\n     *  0| 00 02 03 04 04 06 08 08 08 12 12 13 14 16\n     *  1| 01 -- 03 05 05 07 09 10 11 11 -- 13 15 --\n     *\n     * Warn: Does not work if items don't have a width or height specified\n     * besides their position in the grid.\n     */\n    toString() {\n        const widthOfGrid = this.grid.length;\n        let output = '\\n #|',\n            border = '\\n --',\n            item,\n            i,\n            j;\n\n        // Render the table header\n        for (i = 0; i < widthOfGrid; i++) {\n            output += ' ' + this.padNumber(i, ' ');\n            border += '---';\n        }\n        output += border;\n\n        // Render table contents row by row, as we go on the y axis\n        for (i = 0; i < this.options.lanes; i++) {\n            output += '\\n' + this.padNumber(i, ' ') + '|';\n            for (j = 0; j < widthOfGrid; j++) {\n                output += ' ';\n                item = this.grid[j][i];\n                output += item\n                    ? this.padNumber(this.items.indexOf(item), '0')\n                    : '--';\n            }\n        }\n        output += '\\n';\n        return output;\n    }\n\n    setOption(name: string, value: any) {\n        this.options[name] = value;\n    }\n\n    /**\n     * Build the grid structure from scratch, with the current item positions\n     */\n    generateGrid() {\n        let i;\n        this.resetGrid();\n        for (i = 0; i < this.items.length; i++) {\n            this.markItemPositionToGrid(this.items[i]);\n        }\n    }\n\n    resizeGrid(lanes: number) {\n        let currentColumn = 0;\n\n        this.options.lanes = lanes;\n        this.adjustSizeOfItems();\n\n        this.sortItemsByPosition();\n        this.resetGrid();\n\n        // The items will be sorted based on their index within the this.items array,\n        // that is their \"1d position\"\n        for (let i = 0; i < this.items.length; i++) {\n            const item = this.items[i],\n                position = this.getItemPosition(item);\n\n            this.updateItemPosition(\n                item,\n                this.findPositionForItem(item, { x: currentColumn, y: 0 })\n            );\n\n            // New items should never be placed to the left of previous items\n            currentColumn = Math.max(currentColumn, position.x);\n        }\n\n        this.pullItemsToLeft();\n    }\n\n    /**\n     * This method has two options for the position we want for the item:\n     * - Starting from a certain row/column number and only looking for\n     *   positions to its right\n     * - Accepting positions for a certain row number only (use-case: items\n     *   being shifted to the left/right as a result of collisions)\n     *\n     * @param Object item\n     * @param Object start Position from which to start\n     *     the search.\n     * @param number [fixedRow] If provided, we're going to try to find a\n     *     position for the new item on it. If doesn't fit there, we're going\n     *     to put it on the first row.\n     *\n     * @returns Array x and y.\n     */\n    findPositionForItem(\n        item: GridListItem,\n        start: { x: number; y: number },\n        fixedRow?: number\n    ): Array<number> {\n        let x, y, position;\n\n        // Start searching for a position from the horizontal position of the\n        // rightmost item from the grid\n        for (x = start.x; x < this.grid.length; x++) {\n            if (fixedRow !== undefined) {\n                position = [x, fixedRow];\n\n                if (this.itemFitsAtPosition(item, position)) {\n                    return position;\n                }\n            } else {\n                for (y = start.y; y < this.options.lanes; y++) {\n                    position = [x, y];\n\n                    if (this.itemFitsAtPosition(item, position)) {\n                        return position;\n                    }\n                }\n            }\n        }\n\n        // If we've reached this point, we need to start a new column\n        const newCol = this.grid.length;\n        let newRow = 0;\n\n        if (\n            fixedRow !== undefined &&\n            this.itemFitsAtPosition(item, [newCol, fixedRow])\n        ) {\n            newRow = fixedRow;\n        }\n\n        return [newCol, newRow];\n    }\n\n    moveAndResize(\n        item: GridListItem,\n        newPosition: Array<number>,\n        size: { w: number; h: number }\n    ) {\n        const position = this.getItemPosition({\n            x: newPosition[0],\n            y: newPosition[1],\n            w: item.w,\n            h: item.h\n        });\n        const width = size.w || item.w,\n            height = size.h || item.h;\n\n        this.updateItemPosition(item, [position.x, position.y]);\n        this.updateItemSize(item, width, height);\n\n        this.resolveCollisions(item);\n    }\n\n    moveItemToPosition(item: GridListItem, newPosition: Array<number>) {\n        const position = this.getItemPosition({\n            x: newPosition[0],\n            y: newPosition[1],\n            w: item.w,\n            h: item.h\n        });\n\n        this.updateItemPosition(item, [position.x, position.y]);\n        this.resolveCollisions(item);\n    }\n\n    /**\n     * Resize an item and resolve collisions.\n     *\n     * @param Object item A reference to an item that's part of the grid.\n     * @param Object size\n     * @param number [size.w=item.w] The new width.\n     * @param number [size.h=item.h] The new height.\n     */\n    resizeItem(item: GridListItem, size: { w: number; h: number }) {\n        const width = size.w || item.w,\n            height = size.h || item.h;\n\n        this.updateItemSize(item, width, height);\n\n        this.pullItemsToLeft(item);\n    }\n\n    /**\n     * Compare the current items against a previous snapshot and return only\n     * the ones that changed their attributes in the meantime. This includes both\n     * position (x, y) and size (w, h)\n     *\n     * Each item that is returned is not the GridListItem but the helper that holds GridListItem\n     * and list of changed properties.\n     */\n    getChangedItems(\n        initialItems: Array<GridListItem>,\n        breakpoint?\n    ): Array<{\n        item: GridListItem;\n        changes: Array<string>;\n        isNew: boolean;\n    }> {\n        return this.items\n            .map((item: GridListItem) => {\n                const changes = [];\n                const oldValues: {\n                    x?: number;\n                    y?: number;\n                    w?: number;\n                    h?: number;\n                } = {};\n                const initItem = initialItems.find(\n                    initItm => initItm.$element === item.$element\n                );\n\n                if (!initItem) {\n                    return { item, changes: ['x', 'y', 'w', 'h'], isNew: true };\n                }\n\n                const oldX = initItem.getValueX(breakpoint);\n                if (item.getValueX(breakpoint) !== oldX) {\n                    changes.push('x');\n                    if (oldX || oldX === 0) {\n                        oldValues.x = oldX;\n                    }\n                }\n\n                const oldY = initItem.getValueY(breakpoint);\n                if (item.getValueY(breakpoint) !== oldY) {\n                    changes.push('y');\n                    if (oldY || oldY === 0) {\n                        oldValues.y = oldY;\n                    }\n                }\n                if (\n                    item.getValueW(breakpoint) !==\n                    initItem.getValueW(breakpoint)\n                ) {\n                    changes.push('w');\n                    oldValues.w = initItem.w;\n                }\n                if (\n                    item.getValueH(breakpoint) !==\n                    initItem.getValueH(breakpoint)\n                ) {\n                    changes.push('h');\n                    oldValues.h = initItem.h;\n                }\n\n                return { item, oldValues, changes, isNew: false };\n            })\n            .filter(\n                (itemChange: {\n                    item: GridListItem;\n                    changes: Array<string>;\n                }) => {\n                    return itemChange.changes.length;\n                }\n            );\n    }\n\n    resolveCollisions(item: GridListItem) {\n        if (!this.tryToResolveCollisionsLocally(item)) {\n            this.pullItemsToLeft(item);\n        }\n        if (this.options.floating) {\n            this.pullItemsToLeft();\n        } else if (this.getItemsCollidingWithItem(item).length) {\n            this.pullItemsToLeft();\n        }\n    }\n\n    pushCollidingItems(fixedItem?: GridListItem) {\n        // Start a fresh grid with the fixed item already placed inside\n        this.sortItemsByPosition();\n        this.resetGrid();\n        this.generateGrid();\n\n        this.items\n            .filter(item => !this.isItemFloating(item) && item !== fixedItem)\n            .forEach(item => {\n                if (!this.tryToResolveCollisionsLocally(item)) {\n                    this.pullItemsToLeft(item);\n                }\n            });\n    }\n\n    /**\n     * Build the grid from scratch, by using the current item positions and\n     * pulling them as much to the left as possible, removing as space between\n     * them as possible.\n     *\n     * If a \"fixed item\" is provided, its position will be kept intact and the\n     * rest of the items will be layed around it.\n     */\n    pullItemsToLeft(fixedItem?) {\n        if (this.options.direction === 'none') {\n            return;\n        }\n\n        // Start a fresh grid with the fixed item already placed inside\n        this.sortItemsByPosition();\n        this.resetGrid();\n\n        // Start the grid with the fixed item as the first positioned item\n        if (fixedItem) {\n            const fixedPosition = this.getItemPosition(fixedItem);\n            this.updateItemPosition(fixedItem, [\n                fixedPosition.x,\n                fixedPosition.y\n            ]);\n        }\n\n        this.items\n            .filter((item: GridListItem) => {\n                return !item.dragAndDrop && item !== fixedItem;\n            })\n            .forEach((item: GridListItem) => {\n                const fixedPosition = this.getItemPosition(item);\n                this.updateItemPosition(item, [\n                    fixedPosition.x,\n                    fixedPosition.y\n                ]);\n            });\n\n        for (let i = 0; i < this.items.length; i++) {\n            const item = this.items[i],\n                position = this.getItemPosition(item);\n\n            // The fixed item keeps its exact position\n            if (\n                (fixedItem && item === fixedItem) ||\n                !item.dragAndDrop ||\n                (!this.options.floating &&\n                    this.isItemFloating(item) &&\n                    !this.getItemsCollidingWithItem(item).length)\n            ) {\n                continue;\n            }\n\n            const x = this.findLeftMostPositionForItem(item),\n                newPosition = this.findPositionForItem(\n                    item,\n                    { x: x, y: 0 },\n                    position.y\n                );\n\n            this.updateItemPosition(item, newPosition);\n        }\n    }\n\n    isOverFixedArea(\n        x: number,\n        y: number,\n        w: number,\n        h: number,\n        item: GridListItem = null\n    ): boolean {\n        let itemData = { x, y, w, h };\n\n        if (this.options.direction !== 'horizontal') {\n            itemData = { x: y, y: x, w: h, h: w };\n        }\n\n        for (let i = itemData.x; i < itemData.x + itemData.w; i++) {\n            for (let j = itemData.y; j < itemData.y + itemData.h; j++) {\n                if (\n                    this.grid[i] &&\n                    this.grid[i][j] &&\n                    this.grid[i][j] !== item &&\n                    !this.grid[i][j].dragAndDrop\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    checkItemAboveEmptyArea(\n        item: GridListItem,\n        newPosition: { x: number; y: number }\n    ) {\n        let itemData = {\n            x: newPosition.x,\n            y: newPosition.y,\n            w: item.w,\n            h: item.h\n        };\n        if (\n            !item.itemPrototype &&\n            item.x === newPosition.x &&\n            item.y === newPosition.y\n        ) {\n            return true;\n        }\n\n        if (this.options.direction === 'horizontal') {\n            itemData = {\n                x: newPosition.y,\n                y: newPosition.x,\n                w: itemData.h,\n                h: itemData.w\n            };\n        }\n        return !this.checkItemsInArea(\n            itemData.y,\n            itemData.y + itemData.h - 1,\n            itemData.x,\n            itemData.x + itemData.w - 1,\n            item\n        );\n    }\n\n    fixItemsPositions(options: IGridsterOptions) {\n        // items with x, y that fits gird with size of options.lanes\n        const validItems = this.items\n            .filter((item: GridListItem) => item.itemComponent)\n            .filter((item: GridListItem) =>\n                this.isItemValidForGrid(item, options)\n            );\n        // items that x, y must be generated\n        const invalidItems = this.items\n            .filter((item: GridListItem) => item.itemComponent)\n            .filter(\n                (item: GridListItem) => !this.isItemValidForGrid(item, options)\n            );\n\n        const gridList = new GridList([], options);\n\n        // put items with defined positions to the grid\n        gridList.items = validItems.map((item: GridListItem) => {\n            return item.copyForBreakpoint(options.breakpoint);\n        });\n\n        gridList.generateGrid();\n\n        invalidItems.forEach(item => {\n            // TODO: check if this change does not broke anything\n            // const itemCopy = item.copy();\n            const itemCopy = item.copyForBreakpoint(options.breakpoint);\n            const position = gridList.findPositionForItem(itemCopy, {\n                x: 0,\n                y: 0\n            });\n\n            gridList.items.push(itemCopy);\n            gridList.setItemPosition(itemCopy, position);\n            gridList.markItemPositionToGrid(itemCopy);\n        });\n\n        gridList.pullItemsToLeft();\n        gridList.pushCollidingItems();\n\n        this.items.forEach((itm: GridListItem) => {\n            const cachedItem = gridList.items.filter(cachedItm => {\n                return cachedItm.$element === itm.$element;\n            })[0];\n\n            itm.setValueX(cachedItem.x, options.breakpoint);\n            itm.setValueY(cachedItem.y, options.breakpoint);\n            itm.setValueW(cachedItem.w, options.breakpoint);\n            itm.setValueH(cachedItem.h, options.breakpoint);\n            itm.autoSize = cachedItem.autoSize;\n        });\n    }\n\n    deleteItemPositionFromGrid(item: GridListItem) {\n        const position = this.getItemPosition(item);\n        let x, y;\n\n        for (x = position.x; x < position.x + position.w; x++) {\n            // It can happen to try to remove an item from a position not generated\n            // in the grid, probably when loading a persisted grid of items. No need\n            // to create a column to be able to remove something from it, though\n            if (!this.grid[x]) {\n                continue;\n            }\n\n            for (y = position.y; y < position.y + position.h; y++) {\n                // Don't clear the cell if it's been occupied by a different widget in\n                // the meantime (e.g. when an item has been moved over this one, and\n                // thus by continuing to clear this item's previous position you would\n                // cancel the first item's move, leaving it without any position even)\n                if (this.grid[x][y] === item) {\n                    this.grid[x][y] = null;\n                }\n            }\n        }\n    }\n\n    private isItemFloating(item) {\n        if (item.itemComponent && item.itemComponent.isDragging) {\n            return false;\n        }\n        const position = this.getItemPosition(item);\n\n        if (position.x === 0) {\n            return false;\n        }\n        const rowBelowItem = this.grid[position.x - 1];\n\n        return (rowBelowItem || [])\n            .slice(position.y, position.y + position.h)\n            .reduce((isFloating, cellItem) => {\n                return isFloating && !cellItem;\n            }, true);\n    }\n\n    private isItemValidForGrid(item: GridListItem, options: IGridsterOptions) {\n        const itemData =\n            options.direction === 'horizontal'\n                ? {\n                      x: item.getValueY(options.breakpoint),\n                      y: item.getValueX(options.breakpoint),\n                      w: item.getValueH(options.breakpoint),\n                      h: Math.min(\n                          item.getValueW(this.options.breakpoint),\n                          options.lanes\n                      )\n                  }\n                : {\n                      x: item.getValueX(options.breakpoint),\n                      y: item.getValueY(options.breakpoint),\n                      w: Math.min(\n                          item.getValueW(this.options.breakpoint),\n                          options.lanes\n                      ),\n                      h: item.getValueH(options.breakpoint)\n                  };\n\n        return (\n            typeof itemData.x === 'number' &&\n            typeof itemData.y === 'number' &&\n            itemData.x + itemData.w <= options.lanes\n        );\n    }\n\n    private findDefaultPositionHorizontal(width: number, height: number) {\n        for (const col of this.grid) {\n            const colIdx = this.grid.indexOf(col);\n            let rowIdx = 0;\n            while (rowIdx < col.length - height + 1) {\n                if (\n                    !this.checkItemsInArea(\n                        colIdx,\n                        colIdx + width - 1,\n                        rowIdx,\n                        rowIdx + height - 1\n                    )\n                ) {\n                    return [colIdx, rowIdx];\n                }\n                rowIdx++;\n            }\n        }\n        return [this.grid.length, 0];\n    }\n\n    private findDefaultPositionVertical(width: number, height: number) {\n        for (const row of this.grid) {\n            const rowIdx = this.grid.indexOf(row);\n            let colIdx = 0;\n            while (colIdx < row.length - width + 1) {\n                if (\n                    !this.checkItemsInArea(\n                        rowIdx,\n                        rowIdx + height - 1,\n                        colIdx,\n                        colIdx + width - 1\n                    )\n                ) {\n                    return [colIdx, rowIdx];\n                }\n                colIdx++;\n            }\n        }\n        return [0, this.grid.length];\n    }\n\n    private checkItemsInArea(\n        rowStart: number,\n        rowEnd: number,\n        colStart: number,\n        colEnd: number,\n        item?: GridListItem\n    ) {\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = colStart; j <= colEnd; j++) {\n                if (\n                    this.grid[i] &&\n                    this.grid[i][j] &&\n                    (item ? this.grid[i][j] !== item : true)\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private sortItemsByPosition() {\n        this.items.sort((item1, item2) => {\n            const position1 = this.getItemPosition(item1),\n                position2 = this.getItemPosition(item2);\n\n            // Try to preserve columns.\n            if (position1.x !== position2.x) {\n                return position1.x - position2.x;\n            }\n\n            if (position1.y !== position2.y) {\n                return position1.y - position2.y;\n            }\n\n            // The items are placed on the same position.\n            return 0;\n        });\n    }\n\n    /**\n     * Some items can have 100% height or 100% width. Those dimmensions are\n     * expressed as 0. We need to ensure a valid width and height for each of\n     * those items as the number of items per lane.\n     */\n    private adjustSizeOfItems() {\n        for (let i = 0; i < this.items.length; i++) {\n            const item = this.items[i];\n\n            // This can happen only the first time items are checked.\n            // We need the property to have a value for all the items so that the\n            // `cloneItems` method will merge the properties properly. If we only set\n            // it to the items that need it then the following can happen:\n            //\n            // cloneItems([{id: 1, autoSize: true}, {id: 2}],\n            //            [{id: 2}, {id: 1, autoSize: true}]);\n            //\n            // will result in\n            //\n            // [{id: 1, autoSize: true}, {id: 2, autoSize: true}]\n            if (item.autoSize === undefined) {\n                item.autoSize = item.w === 0 || item.h === 0;\n            }\n\n            if (item.autoSize) {\n                if (this.options.direction === 'horizontal') {\n                    item.h = this.options.lanes;\n                } else {\n                    item.w = this.options.lanes;\n                }\n            }\n        }\n    }\n\n    private resetGrid() {\n        this.grid = [];\n    }\n\n    /**\n     * Check that an item wouldn't overlap with another one if placed at a\n     * certain position within the grid\n     */\n    private itemFitsAtPosition(item: GridListItem, newPosition) {\n        const position = this.getItemPosition(item);\n        let x, y;\n\n        // No coordonate can be negative\n        if (newPosition[0] < 0 || newPosition[1] < 0) {\n            return false;\n        }\n\n        // Make sure the item isn't larger than the entire grid\n        if (\n            newPosition[1] + Math.min(position.h, this.options.lanes) >\n            this.options.lanes\n        ) {\n            return false;\n        }\n\n        if (this.isOverFixedArea(item.x, item.y, item.w, item.h)) {\n            return false;\n        }\n\n        // Make sure the position doesn't overlap with an already positioned\n        // item.\n        for (x = newPosition[0]; x < newPosition[0] + position.w; x++) {\n            const col = this.grid[x];\n            // Surely a column that hasn't even been created yet is available\n            if (!col) {\n                continue;\n            }\n\n            for (y = newPosition[1]; y < newPosition[1] + position.h; y++) {\n                // Any space occupied by an item can continue to be occupied by the\n                // same item.\n                if (col[y] && col[y] !== item) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private updateItemPosition(item: GridListItem, position: Array<any>) {\n        if (item.x !== null && item.y !== null) {\n            this.deleteItemPositionFromGrid(item);\n        }\n\n        this.setItemPosition(item, position);\n\n        this.markItemPositionToGrid(item);\n    }\n\n    /**\n     * @param Object item A reference to a grid item.\n     * @param number width The new width.\n     * @param number height The new height.\n     */\n    private updateItemSize(item: GridListItem, width, height) {\n        if (item.x !== null && item.y !== null) {\n            this.deleteItemPositionFromGrid(item);\n        }\n\n        item.w = width;\n        item.h = height;\n\n        this.markItemPositionToGrid(item);\n    }\n\n    /**\n     * Mark the grid cells that are occupied by an item. This prevents items\n     * from overlapping in the grid\n     */\n    private markItemPositionToGrid(item: GridListItem) {\n        const position = this.getItemPosition(item);\n        let x, y;\n\n        // Ensure that the grid has enough columns to accomodate the current item.\n        this.ensureColumns(position.x + position.w);\n\n        for (x = position.x; x < position.x + position.w; x++) {\n            for (y = position.y; y < position.y + position.h; y++) {\n                this.grid[x][y] = item;\n            }\n        }\n    }\n\n    /**\n     * Ensure that the grid has at least N columns available.\n     */\n    private ensureColumns(N) {\n        for (let i = 0; i < N; i++) {\n            if (!this.grid[i]) {\n                this.grid.push(new GridCol(this.options.lanes));\n            }\n        }\n    }\n\n    private getItemsCollidingWithItem(item: GridListItem): number[] {\n        const collidingItems = [];\n        for (let i = 0; i < this.items.length; i++) {\n            if (\n                item !== this.items[i] &&\n                this.itemsAreColliding(item, this.items[i])\n            ) {\n                collidingItems.push(i);\n            }\n        }\n        return collidingItems;\n    }\n\n    private itemsAreColliding(item1: GridListItem, item2: GridListItem) {\n        const position1 = this.getItemPosition(item1),\n            position2 = this.getItemPosition(item2);\n\n        return !(\n            position2.x >= position1.x + position1.w ||\n            position2.x + position2.w <= position1.x ||\n            position2.y >= position1.y + position1.h ||\n            position2.y + position2.h <= position1.y\n        );\n    }\n\n    /**\n     * Attempt to resolve the collisions after moving an item over one or more\n     * other items within the grid, by shifting the position of the colliding\n     * items around the moving one. This might result in subsequent collisions,\n     * in which case we will revert all position permutations. To be able to\n     * revert to the initial item positions, we create a virtual grid in the\n     * process\n     */\n    private tryToResolveCollisionsLocally(item: GridListItem) {\n        const collidingItems = this.getItemsCollidingWithItem(item);\n        if (!collidingItems.length) {\n            return true;\n        }\n\n        const _gridList = new GridList(\n            this.items.map(itm => {\n                return itm.copy();\n            }),\n            this.options\n        );\n\n        let leftOfItem;\n        let rightOfItem;\n        let aboveOfItem;\n        let belowOfItem;\n\n        for (let i = 0; i < collidingItems.length; i++) {\n            const collidingItem = _gridList.items[collidingItems[i]],\n                collidingPosition = this.getItemPosition(collidingItem);\n\n            // We use a simple algorithm for moving items around when collisions occur:\n            // In this prioritized order, we try to move a colliding item around the\n            // moving one:\n            // 1. to its left side\n            // 2. above it\n            // 3. under it\n            // 4. to its right side\n            const position = this.getItemPosition(item);\n\n            leftOfItem = [\n                position.x - collidingPosition.w,\n                collidingPosition.y\n            ];\n            rightOfItem = [position.x + position.w, collidingPosition.y];\n            aboveOfItem = [\n                collidingPosition.x,\n                position.y - collidingPosition.h\n            ];\n            belowOfItem = [collidingPosition.x, position.y + position.h];\n\n            if (_gridList.itemFitsAtPosition(collidingItem, leftOfItem)) {\n                _gridList.updateItemPosition(collidingItem, leftOfItem);\n            } else if (\n                _gridList.itemFitsAtPosition(collidingItem, aboveOfItem)\n            ) {\n                _gridList.updateItemPosition(collidingItem, aboveOfItem);\n            } else if (\n                _gridList.itemFitsAtPosition(collidingItem, belowOfItem)\n            ) {\n                _gridList.updateItemPosition(collidingItem, belowOfItem);\n            } else if (\n                _gridList.itemFitsAtPosition(collidingItem, rightOfItem)\n            ) {\n                _gridList.updateItemPosition(collidingItem, rightOfItem);\n            } else {\n                // Collisions failed, we must use the pullItemsToLeft method to arrange\n                // the other items around this item with fixed position. This is our\n                // plan B for when local collision resolving fails.\n                return false;\n            }\n        }\n        // If we reached this point it means we managed to resolve the collisions\n        // from one single iteration, just by moving the colliding items around. So\n        // we accept this scenario and merge the branched-out grid instance into the\n        // original one\n\n        this.items.forEach((itm: GridListItem, idx: number) => {\n            const cachedItem = _gridList.items.filter(cachedItm => {\n                return cachedItm.$element === itm.$element;\n            })[0];\n\n            itm.x = cachedItem.x;\n            itm.y = cachedItem.y;\n            itm.w = cachedItem.w;\n            itm.h = cachedItem.h;\n            itm.autoSize = cachedItem.autoSize;\n        });\n        this.generateGrid();\n        return true;\n    }\n\n    /**\n     * When pulling items to the left, we need to find the leftmost position for\n     * an item, with two considerations in mind:\n     * - preserving its current row\n     * - preserving the previous horizontal order between items\n     */\n    private findLeftMostPositionForItem(item) {\n        let tail = 0;\n        const position = this.getItemPosition(item);\n\n        for (let i = 0; i < this.grid.length; i++) {\n            for (let j = position.y; j < position.y + position.h; j++) {\n                const otherItem = this.grid[i][j];\n\n                if (!otherItem) {\n                    continue;\n                }\n\n                const otherPosition = this.getItemPosition(otherItem);\n\n                if (this.items.indexOf(otherItem) < this.items.indexOf(item)) {\n                    tail = otherPosition.x + otherPosition.w;\n                }\n            }\n        }\n\n        return tail;\n    }\n\n    private findItemByPosition(x: number, y: number): GridListItem {\n        for (let i = 0; i < this.items.length; i++) {\n            if (this.items[i].x === x && this.items[i].y === y) {\n                return this.items[i];\n            }\n        }\n    }\n\n    private getItemByAttribute(key, value) {\n        for (let i = 0; i < this.items.length; i++) {\n            if (this.items[i][key] === value) {\n                return this.items[i];\n            }\n        }\n        return null;\n    }\n\n    private padNumber(nr, prefix) {\n        // Currently works for 2-digit numbers (<100)\n        return nr >= 10 ? nr : prefix + nr;\n    }\n\n    /**\n     * If the direction is vertical we need to rotate the grid 90 deg to the\n     * left. Thus, we simulate the fact that items are being pulled to the top.\n     *\n     * Since the items have widths and heights, if we apply the classic\n     * counter-clockwise 90 deg rotation\n     *\n     *     [0 -1]\n     *     [1  0]\n     *\n     * then the top left point of an item will become the bottom left point of\n     * the rotated item. To adjust for this, we need to subtract from the y\n     * position the height of the original item - the width of the rotated item.\n     *\n     * However, if we do this then we'll reverse some actions: resizing the\n     * width of an item will stretch the item to the left instead of to the\n     * right; resizing an item that doesn't fit into the grid will push the\n     * items around it instead of going on a new row, etc.\n     *\n     * We found it better to do a vertical flip of the grid after rotating it.\n     * This restores the direction of the actions and greatly simplifies the\n     * transformations.\n     */\n    private getItemPosition(item: any) {\n        if (this.options.direction === 'horizontal') {\n            return item;\n        } else {\n            return {\n                x: item.y,\n                y: item.x,\n                w: item.h,\n                h: item.w\n            };\n        }\n    }\n\n    /**\n     * See getItemPosition.\n     */\n    private setItemPosition(item, position) {\n        if (this.options.direction === 'horizontal') {\n            item.x = position[0];\n            item.y = position[1];\n        } else {\n            // We're supposed to subtract the rotated item's height which is actually\n            // the non-rotated item's width.\n            item.x = position[1];\n            item.y = position[0];\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { GridList } from './gridList/gridList';\nimport { IGridsterOptions } from './IGridsterOptions';\nimport { IGridsterDraggableOptions } from './IGridsterDraggableOptions';\nimport { GridListItem } from './gridList/GridListItem';\nimport { GridsterComponent } from './gridster.component';\nimport { GridsterOptions } from './GridsterOptions';\n\n@Injectable()\nexport class GridsterService {\n    $element: HTMLElement;\n\n    gridList: GridList;\n\n    items: Array<GridListItem> = [];\n    _items: Array<GridListItem> = [];\n    _itemsMap: { [breakpoint: string]: Array<GridListItem> } = {};\n    disabledItems: Array<GridListItem> = [];\n\n    options: IGridsterOptions;\n    draggableOptions: IGridsterDraggableOptions;\n\n    gridsterRect: ClientRect;\n    gridsterScrollData: { scrollTop: number, scrollLeft: number };\n\n    gridsterOptions: GridsterOptions;\n\n    gridsterComponent: GridsterComponent;\n\n    debounceRenderSubject = new Subject();\n\n    public $positionHighlight: HTMLElement;\n\n    public maxItemWidth: number;\n    public maxItemHeight: number;\n\n    public cellWidth: number;\n    public cellHeight: number;\n\n    public itemRemoveSubject: Subject<GridListItem> = new Subject();\n\n    private _fontSize: number;\n\n    private previousDragPosition: Array<number>;\n    private previousDragSize: Array<number>;\n\n    private currentElement: HTMLElement;\n\n    private _maxGridCols: number;\n\n    private isInit = false;\n\n    constructor() {\n        this.itemRemoveSubject.pipe(debounceTime(0)).subscribe(() => {\n            this.gridList.pullItemsToLeft();\n            this.render();\n            this.updateCachedItems();\n        });\n\n        this.debounceRenderSubject.pipe(debounceTime(0)).subscribe(() => this.render());\n    }\n\n    isInitialized(): boolean {\n        return this.isInit;\n    }\n\n    /**\n     * Must be called before init\n     * @param item\n     */\n    registerItem(item: GridListItem) {\n\n        this.items.push(item);\n        return item;\n    }\n\n    init(gridsterComponent: GridsterComponent) {\n\n        this.gridsterComponent = gridsterComponent;\n\n        this.draggableOptions = gridsterComponent.draggableOptions;\n\n        this.gridsterOptions = gridsterComponent.gridsterOptions;\n    }\n\n    start() {\n        this.updateMaxItemSize();\n\n        // Used to highlight a position an element will land on upon drop\n        if (this.$positionHighlight) {\n            this.removePositionHighlight();\n        }\n\n        this.initGridList();\n\n        this.isInit = true;\n\n        setTimeout(() => {\n            this.copyItems();\n            this.fixItemsPositions();\n\n            this.gridsterComponent.reflowGridster(true);\n            this.gridsterComponent.setReady();\n        });\n    }\n\n    initGridList() {\n        // Create instance of GridList (decoupled lib for handling the grid\n        // positioning and sorting post-drag and dropping)\n        this.gridList = new GridList(this.items, this.options);\n    }\n\n    render() {\n        this.updateMaxItemSize();\n        this.gridList.generateGrid();\n        this.applySizeToItems();\n        this.applyPositionToItems();\n        this.refreshLines();\n    }\n\n    reflow() {\n        this.calculateCellSize();\n        this.render();\n    }\n\n    fixItemsPositions() {\n        if (this.options.responsiveSizes) {\n            this.gridList.fixItemsPositions(this.options);\n        } else {\n            this.gridList.fixItemsPositions(this.gridsterOptions.basicOptions);\n            this.gridsterOptions.responsiveOptions.forEach((options: IGridsterOptions) => {\n                this.gridList.fixItemsPositions(options);\n            });\n        }\n\n        this.updateCachedItems();\n    }\n\n    removeItem(item: GridListItem) {\n        const idx = this.items.indexOf(item);\n\n        if (idx >= 0) {\n            this.items.splice(this.items.indexOf(item), 1);\n        }\n\n        this.gridList.deleteItemPositionFromGrid(item);\n        this.removeItemFromCache(item);\n    }\n\n    onResizeStart(item: GridListItem) {\n        this.currentElement = item.$element;\n\n        this.copyItems();\n\n        this._maxGridCols = this.gridList.grid.length;\n\n        this.highlightPositionForItem(item);\n\n        this.gridsterComponent.isResizing = true;\n\n        this.refreshLines();\n    }\n\n    onResizeDrag(item: GridListItem) {\n        const newSize = this.snapItemSizeToGrid(item);\n        const sizeChanged = this.dragSizeChanged(newSize);\n        const newPosition = this.snapItemPositionToGrid(item);\n        const positionChanged = this.dragPositionChanged(newPosition);\n\n        if (sizeChanged || positionChanged) {\n            // Regenerate the grid with the positions from when the drag started\n            this.restoreCachedItems();\n            this.gridList.generateGrid();\n\n            this.previousDragPosition = newPosition;\n            this.previousDragSize = newSize;\n\n            this.gridList.moveAndResize(item, newPosition, {w: newSize[0], h: newSize[1]});\n\n            // Visually update item positions and highlight shape\n            this.applyPositionToItems(true);\n            this.highlightPositionForItem(item);\n        }\n    }\n\n    onResizeStop(item: GridListItem) {\n        this.currentElement = undefined;\n        this.updateCachedItems();\n        this.previousDragSize = null;\n\n        this.removePositionHighlight();\n\n        this.gridsterComponent.isResizing = false;\n\n        this.gridList.pullItemsToLeft(item);\n        this.debounceRenderSubject.next();\n\n        this.fixItemsPositions();\n    }\n\n    onStart(item: GridListItem) {\n        this.currentElement = item.$element;\n        // itemCtrl.isDragging = true;\n        // Create a deep copy of the items; we use them to revert the item\n        // positions after each drag change, making an entire drag operation less\n        // distructable\n        this.copyItems();\n\n        // Since dragging actually alters the grid, we need to establish the number\n        // of cols (+1 extra) before the drag starts\n\n        this._maxGridCols = this.gridList.grid.length;\n\n        this.gridsterComponent.isDragging = true;\n        this.gridsterComponent.updateGridsterElementData();\n\n        this.refreshLines();\n    }\n\n    onDrag(item: GridListItem) {\n        const newPosition = this.snapItemPositionToGrid(item);\n\n        if (this.dragPositionChanged(newPosition)) {\n\n            // Regenerate the grid with the positions from when the drag started\n            this.restoreCachedItems();\n            this.gridList.generateGrid();\n\n            this.previousDragPosition = newPosition;\n            if (this.options.direction === 'none' &&\n                !this.gridList.checkItemAboveEmptyArea(item, {x: newPosition[0], y: newPosition[1]})) {\n                return;\n            }\n\n            // Since the items list is a deep copy, we need to fetch the item\n            // corresponding to this drag action again\n            this.gridList.moveItemToPosition(item, newPosition);\n\n            // Visually update item positions and highlight shape\n            this.applyPositionToItems(true);\n            this.highlightPositionForItem(item);\n        }\n    }\n\n    cancel() {\n        this.restoreCachedItems();\n        this.previousDragPosition = null;\n        this.updateMaxItemSize();\n        this.applyPositionToItems();\n        this.removePositionHighlight();\n        this.currentElement = undefined;\n        this.gridsterComponent.isDragging = false;\n    }\n\n    onDragOut (item: GridListItem) {\n\n        this.cancel();\n\n        const idx = this.items.indexOf(item);\n        if (idx >= 0) {\n            this.items.splice(idx, 1);\n        }\n\n        this.gridList.pullItemsToLeft();\n        this.render();\n    }\n\n    onStop(item: GridListItem) {\n        this.currentElement = undefined;\n        this.updateCachedItems();\n        this.previousDragPosition = null;\n\n        this.removePositionHighlight();\n\n        this.gridList.pullItemsToLeft(item);\n\n        this.gridsterComponent.isDragging = false;\n\n        this.refreshLines();\n    }\n\n    calculateCellSize() {\n        if (this.options.direction === 'horizontal') {\n            this.cellHeight = this.calculateCellHeight();\n            this.cellWidth = this.options.cellWidth || this.cellHeight * this.options.widthHeightRatio;\n        } else {\n            this.cellWidth = this.calculateCellWidth();\n            this.cellHeight = this.options.cellHeight || this.cellWidth / this.options.widthHeightRatio;\n        }\n        if (this.options.heightToFontSizeRatio) {\n            this._fontSize = this.cellHeight * this.options.heightToFontSizeRatio;\n        }\n    }\n\n    applyPositionToItems(increaseGridsterSize?) {\n        if (!this.options.shrink) {\n            increaseGridsterSize = true;\n        }\n        // TODO: Implement group separators\n        for (let i = 0; i < this.items.length; i++) {\n            // Don't interfere with the positions of the dragged items\n            if (this.isCurrentElement(this.items[i].$element)) {\n                continue;\n            }\n            this.items[i].applyPosition(this);\n        }\n\n        const child = <HTMLElement>this.gridsterComponent.$element.firstChild;\n        // Update the width of the entire grid container with enough room on the\n        // right to allow dragging items to the end of the grid.\n        if (this.options.direction === 'horizontal') {\n            const increaseWidthWith = (increaseGridsterSize) ? this.maxItemWidth : 0;\n            child.style.height = '';\n            child.style.width = ((this.gridList.grid.length + increaseWidthWith) * this.cellWidth) + 'px';\n\n        } else if (this.gridList.grid.length) {\n            const increaseHeightWith = (increaseGridsterSize) ? this.maxItemHeight : 0;\n            child.style.height = ((this.gridList.grid.length + increaseHeightWith) * this.cellHeight) + 'px';\n            child.style.width = '';\n        }\n    }\n\n    refreshLines() {\n        const gridsterContainer = <HTMLElement>this.gridsterComponent.$element.firstChild;\n\n        if (this.options.lines && this.options.lines.visible &&\n            (this.gridsterComponent.isDragging || this.gridsterComponent.isResizing || this.options.lines.always)) {\n            const linesColor = this.options.lines.color || '#d8d8d8';\n            const linesBgColor = this.options.lines.backgroundColor || 'transparent';\n            const linesWidth = this.options.lines.width || 1;\n            const bgPosition = linesWidth / 2;\n\n            gridsterContainer.style.backgroundSize = `${this.cellWidth}px ${this.cellHeight}px`;\n            gridsterContainer.style.backgroundPosition = `-${bgPosition}px -${bgPosition}px`;\n            gridsterContainer.style.backgroundImage = `\n                linear-gradient(to right, ${linesColor} ${linesWidth}px, ${linesBgColor} ${linesWidth}px),\n                linear-gradient(to bottom, ${linesColor} ${linesWidth}px, ${linesBgColor} ${linesWidth}px)\n            `;\n        } else {\n            gridsterContainer.style.backgroundSize = '';\n            gridsterContainer.style.backgroundPosition = '';\n            gridsterContainer.style.backgroundImage = '';\n        }\n    }\n\n    private removeItemFromCache(item: GridListItem) {\n        this._items = this._items\n            .filter(cachedItem => cachedItem.$element !== item.$element);\n\n        Object.keys(this._itemsMap)\n            .forEach((breakpoint: string) => {\n                this._itemsMap[breakpoint] = this._itemsMap[breakpoint]\n                    .filter(cachedItem => cachedItem.$element !== item.$element);\n            });\n    }\n\n    private copyItems(): void {\n        this._items = this.items\n            .filter(item => this.isValidGridItem(item))\n            .map((item: GridListItem) => {\n                return item.copyForBreakpoint(null);\n            });\n\n        this.gridsterOptions.responsiveOptions.forEach((options: IGridsterOptions) => {\n            this._itemsMap[options.breakpoint] = this.items\n                .filter(item => this.isValidGridItem(item))\n                .map((item: GridListItem) => {\n                    return item.copyForBreakpoint(options.breakpoint);\n                });\n        });\n    }\n\n    /**\n     * Update maxItemWidth and maxItemHeight vales according to current state of items\n     */\n    private updateMaxItemSize() {\n        this.maxItemWidth = Math.max.apply(\n            null, this.items.map((item) => {\n                return item.w;\n            }));\n        this.maxItemHeight = Math.max.apply(\n            null, this.items.map((item) => {\n                return item.h;\n            }));\n    }\n\n    /**\n     * Update items properties of previously cached items\n     */\n    private restoreCachedItems() {\n        const items = this.options.breakpoint ? this._itemsMap[this.options.breakpoint] : this._items;\n\n        this.items\n            .filter(item => this.isValidGridItem(item))\n            .forEach((item: GridListItem) => {\n                const cachedItem: GridListItem = items.filter(cachedItm => {\n                    return cachedItm.$element === item.$element;\n                })[0];\n\n                item.x = cachedItem.x;\n                item.y = cachedItem.y;\n\n                item.w = cachedItem.w;\n                item.h = cachedItem.h;\n                item.autoSize = cachedItem.autoSize;\n            });\n    }\n\n    /**\n     * If item should react on grid\n     * @param GridListItem item\n     * @returns boolean\n     */\n    private isValidGridItem(item: GridListItem): boolean {\n        if (this.options.direction === 'none') {\n            return !!item.itemComponent;\n        }\n        return true;\n    }\n\n    private calculateCellWidth() {\n        const gridsterWidth = parseFloat(window.getComputedStyle(this.gridsterComponent.$element).width);\n\n        return gridsterWidth / this.options.lanes;\n    }\n\n    private calculateCellHeight() {\n        const gridsterHeight = parseFloat(window.getComputedStyle(this.gridsterComponent.$element).height);\n\n        return gridsterHeight / this.options.lanes;\n    }\n\n    private applySizeToItems() {\n        for (let i = 0; i < this.items.length; i++) {\n            this.items[i].applySize();\n\n            if (this.options.heightToFontSizeRatio) {\n                this.items[i].$element.style['font-size'] = this._fontSize;\n            }\n        }\n    }\n\n    private isCurrentElement(element) {\n        if (!this.currentElement) {\n            return false;\n        }\n        return element === this.currentElement;\n    }\n\n    private snapItemSizeToGrid(item: GridListItem): Array<number> {\n        const itemSize = {\n            width: parseInt(item.$element.style.width, 10) - 1,\n            height: parseInt(item.$element.style.height, 10) - 1\n        };\n\n        let colSize = Math.round(itemSize.width / this.cellWidth);\n        let rowSize = Math.round(itemSize.height / this.cellHeight);\n\n        // Keep item minimum 1\n        colSize = Math.max(colSize, 1);\n        rowSize = Math.max(rowSize, 1);\n\n        // check if element is pinned\n        if (this.gridList.isOverFixedArea(item.x, item.y, colSize, rowSize, item)) {\n            return [item.w, item.h];\n        }\n\n        return [colSize, rowSize];\n    }\n\n    private generateItemPosition(item: GridListItem): { x: number, y: number } {\n        let position;\n\n        if (item.itemPrototype) {\n            const coords = item.itemPrototype.getPositionToGridster(this);\n            position = {\n                x: Math.round(coords.x / this.cellWidth),\n                y: Math.round(coords.y / this.cellHeight)\n            };\n        } else {\n            position = {\n                x: Math.round(item.positionX / this.cellWidth),\n                y: Math.round(item.positionY / this.cellHeight)\n            };\n        }\n\n        return position;\n    }\n\n    private snapItemPositionToGrid(item: GridListItem) {\n        const position = this.generateItemPosition(item);\n        let col = position.x;\n        let row = position.y;\n\n        // Keep item position within the grid and don't let the item create more\n        // than one extra column\n        col = Math.max(col, 0);\n        row = Math.max(row, 0);\n\n        if (this.options.direction === 'horizontal') {\n            col = Math.min(col, this._maxGridCols);\n        } else {\n            col = Math.min(col, Math.max(0, this.options.lanes - item.w));\n        }\n\n        // check if element is pinned\n        if (this.gridList.isOverFixedArea(col, row, item.w, item.h)) {\n            return [item.x, item.y];\n        }\n\n        return [col, row];\n    }\n\n    private dragSizeChanged(newSize): boolean {\n        if (!this.previousDragSize) {\n            return true;\n        }\n        return (newSize[0] !== this.previousDragSize[0] ||\n            newSize[1] !== this.previousDragSize[1]);\n    }\n\n    private dragPositionChanged(newPosition): boolean {\n        if (!this.previousDragPosition) {\n            return true;\n        }\n        return (newPosition[0] !== this.previousDragPosition[0] ||\n            newPosition[1] !== this.previousDragPosition[1]);\n    }\n\n    private highlightPositionForItem(item) {\n        const size = item.calculateSize(this);\n        const position = item.calculatePosition(this);\n\n        this.$positionHighlight.style.width = size.width + 'px';\n        this.$positionHighlight.style.height = size.height + 'px';\n        this.$positionHighlight.style.left = position.left + 'px';\n        this.$positionHighlight.style.top = position.top + 'px';\n        this.$positionHighlight.style.display = '';\n\n        if (this.options.heightToFontSizeRatio) {\n            this.$positionHighlight.style['font-size'] = this._fontSize;\n        }\n    }\n\n    public updateCachedItems() {\n        // Notify the user with the items that changed since the previous snapshot\n        this.triggerOnChange(null);\n        this.gridsterOptions.responsiveOptions.forEach((options: IGridsterOptions) => {\n            this.triggerOnChange(options.breakpoint);\n        });\n\n        this.copyItems();\n    }\n\n    private triggerOnChange(breakpoint?) {\n        const items = breakpoint ? this._itemsMap[breakpoint] : this._items;\n        const changeItems = this.gridList.getChangedItems(items || [], breakpoint);\n\n        changeItems\n            .filter((itemChange: any) => {\n                return itemChange.item.itemComponent;\n            })\n            .forEach((itemChange: any) => {\n\n                if (itemChange.changes.indexOf('x') >= 0) {\n                    itemChange.item.triggerChangeX(breakpoint);\n                }\n                if (itemChange.changes.indexOf('y') >= 0) {\n                    itemChange.item.triggerChangeY(breakpoint);\n                }\n                if (itemChange.changes.indexOf('w') >= 0) {\n                    itemChange.item.triggerChangeW(breakpoint);\n                }\n                if (itemChange.changes.indexOf('h') >= 0) {\n                    itemChange.item.triggerChangeH(breakpoint);\n                }\n                // should be called only once (not for each breakpoint)\n                itemChange.item.itemComponent.change.emit({\n                    item: itemChange.item,\n                    oldValues: itemChange.oldValues || {},\n                    isNew: itemChange.isNew,\n                    changes: itemChange.changes,\n                    breakpoint: breakpoint\n                });\n            });\n    }\n\n    private removePositionHighlight() {\n        this.$positionHighlight.style.display = 'none';\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject, merge } from 'rxjs';\nimport { takeUntil, switchMap, map, scan, filter, share, tap } from 'rxjs/operators';\n\nimport { GridsterService } from '../gridster.service';\nimport { GridsterItemPrototypeDirective } from './gridster-item-prototype.directive';\nimport { utils } from '../utils/utils';\nimport { DraggableEvent } from '../utils/DraggableEvent';\n\n@Injectable()\nexport class GridsterPrototypeService {\n\n    private isDragging = false;\n\n    private dragSubject = new Subject<any>();\n\n    private dragStartSubject = new Subject<any>();\n\n    private dragStopSubject = new Subject<any>();\n\n    constructor() {}\n\n    observeDropOver (gridster: GridsterService) {\n        return this.dragStopSubject.pipe(\n            filter((data) => {\n                const gridsterEl = gridster.gridsterComponent.$element;\n                const isOverNestedGridster = [].slice.call(gridsterEl.querySelectorAll('gridster'))\n                    .reduce((isOverGridster, nestedGridsterEl) => {\n                        return isOverGridster ||\n                            this.isOverGridster(data.item, nestedGridsterEl, data.event, gridster.options);\n                    }, false);\n\n                if (isOverNestedGridster) {\n                    return false;\n                }\n\n                return this.isOverGridster(data.item, gridsterEl, data.event, gridster.options);\n            }),\n            tap((data) => {\n                // TODO: what we should provide as a param?\n                // prototype.drop.emit({item: prototype.item});\n                data.item.onDrop(gridster);\n            })\n        );\n    }\n\n    observeDropOut (gridster: GridsterService) {\n        return this.dragStopSubject.pipe(\n            filter((data) => {\n                const gridsterEl = gridster.gridsterComponent.$element;\n\n                return !this.isOverGridster(data.item, gridsterEl, data.event, gridster.options);\n            }),\n            tap((data) => {\n                // TODO: what we should provide as a param?\n                data.item.onCancel();\n            })\n        );\n    }\n\n    observeDragOver(gridster: GridsterService): {\n        dragOver: Observable<GridsterItemPrototypeDirective>,\n        dragEnter: Observable<GridsterItemPrototypeDirective>,\n        dragOut: Observable<GridsterItemPrototypeDirective>\n    } {\n        const over = this.dragSubject.pipe(\n            map((data) => {\n                const gridsterEl = gridster.gridsterComponent.$element;\n\n                return {\n                  item: data.item,\n                  event: data.event,\n                  isOver: this.isOverGridster(data.item, gridsterEl, data.event, gridster.options),\n                  isDrop: false\n                };\n            })\n        );\n\n        const drop = this.dragStopSubject.pipe(\n            map((data) => {\n                const gridsterEl = gridster.gridsterComponent.$element;\n\n                return {\n                    item: data.item,\n                    event: data.event,\n                    isOver: this.isOverGridster(data.item, gridsterEl, data.event, gridster.options),\n                    isDrop: true\n                };\n            })\n        );\n\n        const dragExt = merge(\n                // dragStartSubject is connected in case when item prototype is placed above gridster\n                // and drag enter is not fired\n                this.dragStartSubject.pipe(map(() => ({ item: null, isOver: false, isDrop: false }))),\n                over,\n                drop\n            ).pipe(\n                scan((prev: any, next: any) => {\n                    return {\n                        item: next.item,\n                        event: next.event,\n                        isOver: next.isOver,\n                        isEnter: prev.isOver === false && next.isOver === true,\n                        isOut: prev.isOver === true && next.isOver === false && !prev.isDrop,\n                        isDrop: next.isDrop\n                    };\n                }),\n                filter((data: any) => {\n                    return !data.isDrop;\n                }),\n                share()\n            );\n\n        const dragEnter = this.createDragEnterObservable(dragExt, gridster);\n        const dragOut = this.createDragOutObservable(dragExt, gridster);\n        const dragOver = dragEnter\n            .pipe(\n                switchMap(() => this.dragSubject.pipe(takeUntil(dragOut))),\n                map((data: any) => data.item)\n            );\n\n        return { dragEnter, dragOut, dragOver };\n    }\n\n    dragItemStart(item: GridsterItemPrototypeDirective, event: DraggableEvent) {\n        this.isDragging = true;\n        this.dragStartSubject.next({ item, event });\n    }\n\n    dragItemStop(item: GridsterItemPrototypeDirective, event: DraggableEvent) {\n        this.isDragging = false;\n        this.dragStopSubject.next({ item, event });\n    }\n\n    updatePrototypePosition(item: GridsterItemPrototypeDirective, event: DraggableEvent) {\n        this.dragSubject.next({ item, event });\n    }\n\n    /**\n     * Creates observable that is fired on dragging over gridster container.\n     */\n    private createDragOverObservable (\n        dragIsOver: Observable<{item: GridsterItemPrototypeDirective, isOver: boolean}>,\n        gridster: GridsterService\n    ) {\n        return dragIsOver.pipe(\n            filter((data: any) => data.isOver && !data.isEnter && !data.isOut),\n            map((data: any): GridsterItemPrototypeDirective => data.item),\n            tap((item) => item.onOver(gridster))\n        );\n    }\n    /**\n     * Creates observable that is fired on drag enter gridster container.\n     */\n    private createDragEnterObservable (\n        dragIsOver: Observable<{item: GridsterItemPrototypeDirective, isOver: boolean}>,\n        gridster: GridsterService\n    ) {\n        return dragIsOver.pipe(\n            filter((data: any) => data.isEnter),\n            map((data: any): GridsterItemPrototypeDirective => data.item),\n            tap((item) => item.onEnter(gridster))\n        );\n    }\n    /**\n     * Creates observable that is fired on drag out gridster container.\n     */\n    private createDragOutObservable (\n        dragIsOver: Observable<{item: GridsterItemPrototypeDirective,\n        isOver: boolean}>,\n        gridster: GridsterService\n    ) {\n        return dragIsOver.pipe(\n            filter((data: any) => data.isOut),\n            map((data: any): GridsterItemPrototypeDirective => data.item),\n            tap((item) => item.onOut(gridster))\n        );\n    }\n\n    /**\n     * Checks whether \"element\" position fits inside \"containerEl\" position.\n     * It checks if \"element\" is totally covered by \"containerEl\" area.\n     */\n    private isOverGridster(item: GridsterItemPrototypeDirective, gridsterEl: HTMLElement, event, options): boolean {\n        const el = item.$element;\n        const parentItem = <HTMLElement>gridsterEl.parentElement &&\n            <HTMLElement>gridsterEl.parentElement.closest('gridster-item');\n\n        if (parentItem) {\n            return this.isOverGridster(item, parentItem, event, options);\n        }\n\n        switch (options.tolerance) {\n            case 'fit':\n                return utils.isElementFitContainer(el, gridsterEl);\n            case 'intersect':\n                return utils.isElementIntersectContainer(el, gridsterEl);\n            case 'touch':\n                return utils.isElementTouchContainer(el, gridsterEl);\n            default:\n                return utils.isCursorAboveElement(event, gridsterEl);\n        }\n    }\n}\n","import { Observable, of, fromEvent, pipe, merge } from 'rxjs';\nimport { debounceTime, map, distinctUntilChanged } from 'rxjs/operators';\n\nimport { IGridsterOptions } from './IGridsterOptions';\n\nexport class GridsterOptions {\n    direction: string;\n    lanes: number;\n    widthHeightRatio: number;\n    heightToFontSizeRatio: number;\n    responsiveView: boolean;\n    responsiveSizes: boolean;\n    responsiveToParent: boolean;\n    dragAndDrop: boolean;\n    resizable: boolean;\n    shrink: boolean;\n    minWidth: number;\n    useCSSTransforms: boolean;\n\n    defaults: IGridsterOptions = {\n        lanes: 5,\n        direction: 'horizontal',\n        widthHeightRatio: 1,\n        shrink: false,\n        responsiveView: true,\n        responsiveSizes: false,\n        responsiveToParent: false,\n        dragAndDrop: true,\n        resizable: false,\n        useCSSTransforms: false,\n        floating: true,\n        tolerance: 'pointer'\n    };\n\n    change: Observable<IGridsterOptions>;\n\n    responsiveOptions: Array<IGridsterOptions> = [];\n    basicOptions: IGridsterOptions;\n\n    breakpointsMap = {\n        sm: 576, // Small devices\n        md: 768, // Medium devices\n        lg: 992, // Large devices\n        xl: 1200 // Extra large\n    };\n\n    constructor(config: IGridsterOptions, gridsterElement: HTMLElement) {\n        const responsiveContainer = config.responsiveToParent ? gridsterElement : window;\n\n        this.basicOptions = config;\n        this.responsiveOptions = this.extendResponsiveOptions(config.responsiveOptions || []);\n\n        this.change = merge(\n                of(this.getOptionsByWidth(this.getElementWidth(responsiveContainer))),\n                fromEvent(window, 'resize').pipe(\n                    debounceTime(config.responsiveDebounce || 0),\n                    map((event: Event) => this.getOptionsByWidth(this.getElementWidth(responsiveContainer)))\n                )\n            ).pipe(distinctUntilChanged(null, (options: any) => options.minWidth));\n    }\n\n    getOptionsByWidth(width: number): IGridsterOptions {\n        let i = 0;\n        let options: IGridsterOptions = Object.assign({}, this.defaults, this.basicOptions);\n\n        while (this.responsiveOptions[i]) {\n            if (this.responsiveOptions[i].minWidth <= width) {\n                options = this.responsiveOptions[i];\n            }\n            i++;\n        }\n\n        return options;\n    }\n\n    private extendResponsiveOptions(responsiveOptions: Array<IGridsterOptions>): Array<IGridsterOptions> {\n        return responsiveOptions\n            // responsive options are valid only with \"breakpoint\" property\n            .filter(options => options.breakpoint)\n            // set default minWidth if not given\n            .map((options) => {\n                return Object.assign({\n                    minWidth: this.breakpointsMap[options.breakpoint] || 0\n                }, options);\n            })\n            .sort((curr, next) => curr.minWidth - next.minWidth)\n            .map((options) => <IGridsterOptions>Object.assign({}, this.defaults, this.basicOptions, options));\n    }\n\n    private getElementWidth($element: any) {\n        if ($element === window) {\n            return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        }\n\n        return $element.clientWidth;\n    }\n}\n","import {\n    Component,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    ElementRef,\n    ViewChild,\n    NgZone,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    HostBinding,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    Observable,\n    Subscription,\n    fromEvent,\n    ConnectableObservable\n} from 'rxjs';\nimport { debounceTime, filter, publish } from 'rxjs/operators';\n\nimport { utils } from './utils/utils';\nimport { GridsterService } from './gridster.service';\nimport { IGridsterOptions } from './IGridsterOptions';\nimport { IGridsterDraggableOptions } from './IGridsterDraggableOptions';\nimport { GridsterPrototypeService } from './gridster-prototype/gridster-prototype.service';\nimport { GridsterItemPrototypeDirective } from './gridster-prototype/gridster-item-prototype.directive';\nimport { GridListItem } from './gridList/GridListItem';\nimport { GridsterOptions } from './GridsterOptions';\n\n@Component({\n    selector: 'ngx-gridster',\n    template: `<div class=\"gridster-container\">\n      <ng-content></ng-content>\n      <div class=\"position-highlight\" style=\"display:none;\" #positionHighlight>\n        <div class=\"inner\"></div>\n      </div>\n    </div>`,\n    styles: [\n        `\n            ngx-gridster {\n                position: relative;\n                display: block;\n                left: 0;\n                width: 100%;\n            }\n\n            ngx-gridster.gridster--dragging {\n                -moz-user-select: none;\n                -khtml-user-select: none;\n                -webkit-user-select: none;\n                -ms-user-select: none;\n                user-select: none;\n            }\n\n            ngx-gridster .gridster-container {\n                position: relative;\n                width: 100%;\n                list-style: none;\n                -webkit-transition: width 0.2s, height 0.2s;\n                transition: width 0.2s, height 0.2s;\n            }\n\n            ngx-gridster .position-highlight {\n                display: block;\n                position: absolute;\n                z-index: 1;\n            }\n        `\n    ],\n    providers: [GridsterService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class GridsterComponent implements OnInit, AfterContentInit, OnDestroy {\n    @Input() options: IGridsterOptions;\n    @Output() optionsChange = new EventEmitter<any>();\n    @Output() ready = new EventEmitter<any>();\n    @Output() reflow = new EventEmitter<any>();\n    @Output() prototypeDrop = new EventEmitter<{ item: GridListItem }>();\n    @Output() prototypeEnter = new EventEmitter<{ item: GridListItem }>();\n    @Output() prototypeOut = new EventEmitter<{ item: GridListItem }>();\n    @Input() draggableOptions: IGridsterDraggableOptions = {};\n    @Input() parent: GridsterComponent;\n\n    @ViewChild('positionHighlight', { static: true }) $positionHighlight;\n    @HostBinding('class.gridster--dragging') isDragging = false;\n    @HostBinding('class.gridster--resizing') isResizing = false;\n\n    @HostBinding('class.gridster--ready') isReady = false;\n    gridster: GridsterService;\n    $element: HTMLElement;\n\n    gridsterOptions: GridsterOptions;\n    isPrototypeEntered = false;\n    private isDisabled = false;\n    private subscription = new Subscription();\n\n    constructor(\n        private zone: NgZone,\n        elementRef: ElementRef,\n        gridster: GridsterService,\n        private gridsterPrototype: GridsterPrototypeService\n    ) {\n        this.gridster = gridster;\n        this.$element = elementRef.nativeElement;\n    }\n\n    ngOnInit() {\n        this.gridsterOptions = new GridsterOptions(this.options, this.$element);\n\n        if (this.options.useCSSTransforms) {\n            this.$element.classList.add('css-transform');\n        }\n\n        this.subscription.add(\n            this.gridsterOptions.change.subscribe(options => {\n                this.gridster.options = options;\n                if (this.gridster.gridList) {\n                    this.gridster.gridList.options = options;\n                }\n                setTimeout(() => this.optionsChange.emit(options));\n            })\n        );\n\n        this.gridster.init(this);\n\n        this.subscription.add(\n            fromEvent(window, 'resize')\n                .pipe(\n                    debounceTime(this.gridster.options.responsiveDebounce || 0),\n                    filter(() => this.gridster.options.responsiveView)\n                )\n                .subscribe(() => this.reload())\n        );\n\n        this.zone.runOutsideAngular(() => {\n            this.subscription.add(\n                fromEvent(document, 'scroll', { passive: true }).subscribe(() =>\n                    this.updateGridsterElementData()\n                )\n            );\n            const scrollableContainer = utils.getScrollableContainer(this.$element);\n            if (scrollableContainer) {\n                this.subscription.add(\n                    fromEvent(scrollableContainer, 'scroll', { passive: true })\n                    .subscribe(() =>\n                        this.updateGridsterElementData()\n                    )\n                );\n            }\n        });\n    }\n\n    ngAfterContentInit() {\n        this.gridster.start();\n\n        this.updateGridsterElementData();\n\n        this.connectGridsterPrototype();\n\n        this.gridster.$positionHighlight = this.$positionHighlight.nativeElement;\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n\n    /**\n     * Change gridster config option and rebuild\n     * @param string name\n     * @param any value\n     * @return GridsterComponent\n     */\n    setOption(name: string, value: any) {\n        if (name === 'dragAndDrop') {\n            if (value) {\n                this.enableDraggable();\n            } else {\n                this.disableDraggable();\n            }\n        }\n        if (name === 'resizable') {\n            if (value) {\n                this.enableResizable();\n            } else {\n                this.disableResizable();\n            }\n        }\n        if (name === 'lanes') {\n            this.gridster.options.lanes = value;\n\n            this.gridster.gridList.fixItemsPositions(this.gridster.options);\n            this.reflowGridster();\n        }\n        if (name === 'direction') {\n            this.gridster.options.direction = value;\n            this.gridster.gridList.pullItemsToLeft();\n        }\n        if (name === 'widthHeightRatio') {\n            this.gridster.options.widthHeightRatio = parseFloat(value || 1);\n        }\n        if (name === 'responsiveView') {\n            this.gridster.options.responsiveView = !!value;\n        }\n        this.gridster.gridList.setOption(name, value);\n\n        return this;\n    }\n\n    reload() {\n        setTimeout(() => {\n            this.gridster.fixItemsPositions();\n            this.reflowGridster();\n        });\n\n        return this;\n    }\n\n    reflowGridster(isInit = false) {\n        this.gridster.reflow();\n        this.reflow.emit({\n            isInit: isInit,\n            gridsterComponent: this\n        });\n    }\n\n    updateGridsterElementData() {\n        this.gridster.gridsterScrollData = this.getScrollPositionFromParents(\n            this.$element\n        );\n        this.gridster.gridsterRect = this.$element.getBoundingClientRect();\n    }\n\n    setReady() {\n        setTimeout(() => (this.isReady = true));\n        this.ready.emit();\n    }\n\n    adjustItemsHeightToContent(\n        scrollableItemElementSelector: string = '.gridster-item-inner'\n    ) {\n        this.gridster.items\n            // convert each item to object with information about content height and scroll height\n            .map((item: GridListItem) => {\n                const scrollEl = item.$element.querySelector(\n                    scrollableItemElementSelector\n                );\n                const contentEl = scrollEl.lastElementChild;\n                const scrollElDistance = utils.getRelativeCoordinates(\n                    scrollEl,\n                    item.$element\n                );\n                const scrollElRect = scrollEl.getBoundingClientRect();\n                const contentRect = contentEl.getBoundingClientRect();\n\n                return {\n                    item,\n                    contentHeight: contentRect.bottom - scrollElRect.top,\n                    scrollElDistance\n                };\n            })\n            // calculate required height in lanes amount and update item \"h\"\n            .forEach(data => {\n                data.item.h = Math.ceil(<any>(\n                    (data.contentHeight /\n                        (this.gridster.cellHeight - data.scrollElDistance.top))\n                ));\n            });\n\n        this.gridster.fixItemsPositions();\n        this.gridster.reflow();\n    }\n\n    disable(item) {\n        const itemIdx = this.gridster.items.indexOf(item.itemComponent);\n\n        this.isDisabled = true;\n        if (itemIdx >= 0) {\n            delete this.gridster.items[\n                this.gridster.items.indexOf(item.itemComponent)\n            ];\n        }\n        this.gridster.onDragOut(item);\n    }\n\n    enable() {\n        this.isDisabled = false;\n    }\n\n    private getScrollPositionFromParents(\n        element: Element,\n        data = { scrollTop: 0, scrollLeft: 0 }\n    ): { scrollTop: number; scrollLeft: number } {\n        if (element.parentElement && element.parentElement !== document.body) {\n            data.scrollTop += element.parentElement.scrollTop;\n            data.scrollLeft += element.parentElement.scrollLeft;\n\n            return this.getScrollPositionFromParents(\n                element.parentElement,\n                data\n            );\n        }\n\n        return {\n            scrollTop: data.scrollTop,\n            scrollLeft: data.scrollLeft\n        };\n    }\n\n    /**\n     * Connect gridster prototype item to gridster dragging hooks (onStart, onDrag, onStop).\n     */\n    private connectGridsterPrototype() {\n        this.gridsterPrototype.observeDropOut(this.gridster).subscribe();\n\n        const dropOverObservable = <ConnectableObservable<any>>(\n            this.gridsterPrototype\n                .observeDropOver(this.gridster)\n                .pipe(publish())\n        );\n\n        const dragObservable = this.gridsterPrototype.observeDragOver(\n            this.gridster\n        );\n\n        dragObservable.dragOver\n            .pipe(filter(() => !this.isDisabled))\n            .subscribe((prototype: GridsterItemPrototypeDirective) => {\n                if (!this.isPrototypeEntered) {\n                    return;\n                }\n                this.gridster.onDrag(prototype.item);\n            });\n\n        dragObservable.dragEnter\n            .pipe(filter(() => !this.isDisabled))\n            .subscribe((prototype: GridsterItemPrototypeDirective) => {\n                this.isPrototypeEntered = true;\n\n                if (this.gridster.items.indexOf(prototype.item) < 0) {\n                    this.gridster.items.push(prototype.item);\n                }\n                this.gridster.onStart(prototype.item);\n                prototype.setDragContextGridster(this.gridster);\n\n                if (this.parent) {\n                    this.parent.disable(prototype.item);\n                }\n                this.prototypeEnter.emit({ item: prototype.item });\n            });\n\n        dragObservable.dragOut\n            .pipe(filter(() => !this.isDisabled))\n            .subscribe((prototype: GridsterItemPrototypeDirective) => {\n                if (!this.isPrototypeEntered) {\n                    return;\n                }\n                this.gridster.onDragOut(prototype.item);\n                this.isPrototypeEntered = false;\n\n                this.prototypeOut.emit({ item: prototype.item });\n\n                if (this.parent) {\n                    this.parent.enable();\n\n                    this.parent.isPrototypeEntered = true;\n                    if (\n                        this.parent.gridster.items.indexOf(prototype.item) < 0\n                    ) {\n                        this.parent.gridster.items.push(prototype.item);\n                    }\n                    this.parent.gridster.onStart(prototype.item);\n                    prototype.setDragContextGridster(this.parent.gridster);\n                    // timeout is needed to be sure that \"enter\" event is fired after \"out\"\n                    setTimeout(() => {\n                        this.parent.prototypeEnter.emit({\n                            item: prototype.item\n                        });\n                        prototype.onEnter(this.parent.gridster);\n                    });\n                }\n            });\n\n        dropOverObservable\n            .pipe(filter(() => !this.isDisabled))\n            .subscribe(data => {\n                if (!this.isPrototypeEntered) {\n                    return;\n                }\n\n                this.gridster.onStop(data.item.item);\n                this.gridster.removeItem(data.item.item);\n\n                this.isPrototypeEntered = false;\n                if (this.parent) {\n                    this.parent.enable();\n                }\n                this.prototypeDrop.emit({ item: data.item.item });\n            });\n\n        dropOverObservable.connect();\n    }\n\n    private enableDraggable() {\n        this.gridster.options.dragAndDrop = true;\n\n        this.gridster.items\n            .filter(\n                item => item.itemComponent && item.itemComponent.dragAndDrop\n            )\n            .forEach((item: GridListItem) =>\n                item.itemComponent.enableDragDrop()\n            );\n    }\n\n    private disableDraggable() {\n        this.gridster.options.dragAndDrop = false;\n\n        this.gridster.items\n            .filter(item => item.itemComponent)\n            .forEach((item: GridListItem) =>\n                item.itemComponent.disableDraggable()\n            );\n    }\n\n    private enableResizable() {\n        this.gridster.options.resizable = true;\n\n        this.gridster.items\n            .filter(item => item.itemComponent && item.itemComponent.resizable)\n            .forEach((item: GridListItem) =>\n                item.itemComponent.enableResizable()\n            );\n    }\n\n    private disableResizable() {\n        this.gridster.options.resizable = false;\n\n        this.gridster.items.forEach((item: GridListItem) =>\n            item.itemComponent.disableResizable()\n        );\n    }\n}\n","import { GridsterItemComponent } from '../gridster-item/gridster-item.component';\nimport { GridsterItemPrototypeDirective } from '../gridster-prototype/gridster-item-prototype.directive';\nimport { GridsterService } from '../gridster.service';\n\nexport class GridListItem {\n    static BREAKPOINTS: Array<string> = ['sm', 'md', 'lg', 'xl'];\n    static X_PROPERTY_MAP: any = {\n        sm: 'xSm',\n        md: 'xMd',\n        lg: 'xLg',\n        xl: 'xXl'\n    };\n\n    static Y_PROPERTY_MAP: any = {\n        sm: 'ySm',\n        md: 'yMd',\n        lg: 'yLg',\n        xl: 'yXl'\n    };\n\n    static W_PROPERTY_MAP: any = {\n        sm: 'wSm',\n        md: 'wMd',\n        lg: 'wLg',\n        xl: 'wXl'\n    };\n\n    static H_PROPERTY_MAP: any = {\n        sm: 'hSm',\n        md: 'hMd',\n        lg: 'hLg',\n        xl: 'hXl'\n    };\n\n    itemComponent: GridsterItemComponent;\n    itemPrototype: GridsterItemPrototypeDirective;\n    itemObject: any;\n\n    get $element () {\n        return this.getItem().$element;\n    }\n\n    get x () {\n        const item = this.getItem();\n        const breakpoint = item.gridster ? item.gridster.options.breakpoint : null;\n\n        return this.getValueX(breakpoint);\n    }\n    set x (value: number) {\n        const item = this.getItem();\n        const breakpoint = item.gridster ? item.gridster.options.breakpoint : null;\n\n        this.setValueX(value, breakpoint);\n    }\n\n    get y () {\n        const item = this.getItem();\n        const breakpoint = item.gridster ? item.gridster.options.breakpoint : null;\n\n        return this.getValueY(breakpoint);\n    }\n    set y (value: number) {\n        const item = this.getItem();\n        const breakpoint = item.gridster ? item.gridster.options.breakpoint : null;\n\n        this.setValueY(value, breakpoint);\n    }\n\n    get w () {\n        const item = this.getItem();\n        const breakpoint = item.gridster ? item.gridster.options.breakpoint : null;\n\n        return this.getValueW(breakpoint);\n    }\n    set w (value: number) {\n        const item = this.getItem();\n        const breakpoint = item.gridster ? item.gridster.options.breakpoint : null;\n\n        this.setValueW(value, breakpoint);\n    }\n\n    get h () {\n        const item = this.getItem();\n        const breakpoint = item.gridster ? item.gridster.options.breakpoint : null;\n\n        return this.getValueH(breakpoint);\n    }\n    set h (value: number) {\n        const item = this.getItem();\n        const breakpoint = item.gridster ? item.gridster.options.breakpoint : null;\n\n        this.setValueH(value, breakpoint);\n    }\n\n    get autoSize () {\n        return this.getItem().autoSize;\n    }\n    set autoSize (value: boolean) {\n        this.getItem().autoSize = value;\n    }\n\n    get dragAndDrop() {\n        return !!this.getItem().dragAndDrop;\n    }\n\n    get resizable() {\n        return !!this.getItem().resizable;\n    }\n\n    get positionX() {\n        const item = this.itemComponent || this.itemPrototype;\n\n        if (!item) {\n            return null;\n        }\n\n        return item.positionX;\n    }\n\n    get positionY() {\n        const item = this.itemComponent || this.itemPrototype;\n\n        if (!item) {\n            return null;\n        }\n\n        return item.positionY;\n    }\n\n    public setFromGridsterItem (item: GridsterItemComponent): GridListItem {\n        if (this.isItemSet()) {\n            throw new Error('GridListItem is already set.');\n        }\n        this.itemComponent = item;\n        return this;\n    }\n\n    public setFromGridsterItemPrototype (item: GridsterItemPrototypeDirective): GridListItem {\n        if (this.isItemSet()) {\n            throw new Error('GridListItem is already set.');\n        }\n        this.itemPrototype = item;\n        return this;\n    }\n\n    public setFromObjectLiteral (item: Object): GridListItem {\n        if (this.isItemSet()) {\n            throw new Error('GridListItem is already set.');\n        }\n        this.itemObject = item;\n        return this;\n    }\n\n    public copy() {\n        const itemCopy = new GridListItem();\n\n        return itemCopy.setFromObjectLiteral({\n            $element: this.$element,\n            x: this.x,\n            y: this.y,\n            w: this.w,\n            h: this.h,\n            autoSize: this.autoSize,\n            dragAndDrop: this.dragAndDrop,\n            resizable: this.resizable\n        });\n    }\n\n    public copyForBreakpoint(breakpoint?) {\n        const itemCopy = new GridListItem();\n\n        return itemCopy.setFromObjectLiteral({\n            $element: this.$element,\n            x: this.getValueX(breakpoint),\n            y: this.getValueY(breakpoint),\n            w: this.getValueW(breakpoint),\n            h: this.getValueH(breakpoint),\n            autoSize: this.autoSize,\n            dragAndDrop: this.dragAndDrop,\n            resizable: this.resizable\n        });\n    }\n\n    public getValueX(breakpoint?) {\n        const item = this.getItem();\n\n        return item[this.getXProperty(breakpoint)];\n    }\n\n    public getValueY(breakpoint?) {\n        const item = this.getItem();\n\n        return item[this.getYProperty(breakpoint)];\n    }\n\n    public getValueW(breakpoint?) {\n        const item = this.getItem();\n\n        return item[this.getWProperty(breakpoint)] || 1;\n    }\n\n    public getValueH(breakpoint?) {\n        const item = this.getItem();\n\n        return item[this.getHProperty(breakpoint)] || 1;\n    }\n\n    public setValueX(value: number, breakpoint?) {\n        const item = this.getItem();\n\n        item[this.getXProperty(breakpoint)] = value;\n    }\n\n    public setValueY(value: number, breakpoint?) {\n        const item = this.getItem();\n\n        item[this.getYProperty(breakpoint)] = value;\n    }\n\n    public setValueW(value: number, breakpoint?) {\n        const item = this.getItem();\n\n        item[this.getWProperty(breakpoint)] = value;\n    }\n\n    public setValueH(value: number, breakpoint?) {\n        const item = this.getItem();\n\n        item[this.getHProperty(breakpoint)] = value;\n    }\n\n    public triggerChangeX(breakpoint?) {\n        const item = this.itemComponent;\n        if (item) {\n            item[this.getXProperty(breakpoint) + 'Change'].emit(this.getValueX(breakpoint));\n        }\n    }\n\n    public triggerChangeY(breakpoint?) {\n        const item = this.itemComponent;\n        if (item) {\n            item[this.getYProperty(breakpoint) + 'Change'].emit(this.getValueY(breakpoint));\n        }\n    }\n\n    public triggerChangeW(breakpoint?) {\n        const item = this.itemComponent;\n        if (item) {\n            item[this.getWProperty(breakpoint) + 'Change'].emit(this.getValueW(breakpoint));\n        }\n    }\n\n    public triggerChangeH(breakpoint?) {\n        const item = this.itemComponent;\n        if (item) {\n            item[this.getHProperty(breakpoint) + 'Change'].emit(this.getValueH(breakpoint));\n        }\n    }\n\n    public hasPositions(breakpoint?) {\n        const x = this.getValueX(breakpoint);\n        const y = this.getValueY(breakpoint);\n\n        return (x || x === 0) && (y || y === 0);\n    }\n\n    public applyPosition(gridster?: GridsterService) {\n        const position = this.calculatePosition(gridster);\n\n        this.itemComponent.positionX = position.left;\n        this.itemComponent.positionY = position.top;\n        this.itemComponent.updateElemenetPosition();\n    }\n\n    public calculatePosition(gridster?: GridsterService): {left: number, top: number} {\n        if (!gridster && !this.itemComponent) {\n            return {left: 0, top: 0};\n        }\n        gridster = gridster || this.itemComponent.gridster;\n\n        return {\n            left: this.x * gridster.cellWidth,\n            top: this.y * gridster.cellHeight\n        };\n    }\n\n    public applySize(gridster?: GridsterService): void {\n        const size = this.calculateSize(gridster);\n\n        this.$element.style.width = size.width + 'px';\n        this.$element.style.height = size.height + 'px';\n    }\n\n    public calculateSize(gridster?: GridsterService): {width: number, height: number} {\n        if (!gridster && !this.itemComponent) {\n            return {width: 0, height: 0};\n        }\n        gridster = gridster || this.itemComponent.gridster;\n\n        let width = this.getValueW(gridster.options.breakpoint);\n        let height = this.getValueH(gridster.options.breakpoint);\n\n        if (gridster.options.direction === 'vertical') {\n            width = Math.min(width, gridster.options.lanes);\n        }\n        if (gridster.options.direction === 'horizontal') {\n            height = Math.min(height, gridster.options.lanes);\n        }\n\n        return {\n            width: width * gridster.cellWidth,\n            height: height * gridster.cellHeight\n        };\n    }\n\n    private getXProperty(breakpoint?: string) {\n\n        if (breakpoint && this.itemComponent) {\n            return GridListItem.X_PROPERTY_MAP[breakpoint];\n        } else {\n            return 'x';\n        }\n    }\n\n    private getYProperty(breakpoint?: string) {\n\n        if (breakpoint && this.itemComponent) {\n            return GridListItem.Y_PROPERTY_MAP[breakpoint];\n        } else {\n            return 'y';\n        }\n    }\n\n    private getWProperty(breakpoint?: string) {\n        if (this.itemPrototype) {\n            return this.itemPrototype[GridListItem.W_PROPERTY_MAP[breakpoint]] ?\n                GridListItem.W_PROPERTY_MAP[breakpoint] : 'w';\n        }\n\n        const item = this.getItem();\n        const responsiveSizes = item.gridster && item.gridster.options.responsiveSizes;\n\n        if (breakpoint && responsiveSizes) {\n            return GridListItem.W_PROPERTY_MAP[breakpoint];\n        } else {\n            return 'w';\n        }\n    }\n\n    private getHProperty(breakpoint?: string) {\n        if (this.itemPrototype) {\n            return this.itemPrototype[GridListItem.H_PROPERTY_MAP[breakpoint]] ?\n                GridListItem.H_PROPERTY_MAP[breakpoint] : 'h';\n        }\n\n        const item = this.getItem();\n        const responsiveSizes = item.gridster && item.gridster.options.responsiveSizes;\n\n        if (breakpoint && responsiveSizes) {\n            return GridListItem.H_PROPERTY_MAP[breakpoint];\n        } else {\n            return 'h';\n        }\n    }\n\n    private getItem(): any {\n        const item = this.itemComponent || this.itemPrototype || this.itemObject;\n\n        if (!item) {\n            throw new Error('GridListItem is not set.');\n        }\n        return item;\n    }\n\n    private isItemSet() {\n        return this.itemComponent || this.itemPrototype || this.itemObject;\n    }\n}\n","export class DraggableEvent {\n    clientX: number;\n\n    clientY: number;\n\n    pageX: number;\n\n    pageY: number;\n\n    target: any;\n\n    type: string;\n\n\n    private touchEvent: TouchEvent;\n\n    private mouseEvent: MouseEvent;\n\n    constructor(event: any) {\n        if (event.touches) {\n            this.touchEvent = (<TouchEvent>event);\n            this.setDataFromTouchEvent(this.touchEvent);\n        } else {\n            this.mouseEvent = (<MouseEvent>event);\n            this.setDataFromMouseEvent(this.mouseEvent);\n        }\n    }\n\n    isTouchEvent(): boolean {\n        return !!this.touchEvent;\n    }\n\n    pauseEvent() {\n        const event: Event = this.touchEvent || this.mouseEvent;\n\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        event.cancelBubble = true;\n        event.returnValue = false;\n        return false;\n    }\n\n    getRelativeCoordinates(container: HTMLElement): {x: number, y: number} {\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;\n        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;\n\n        const rect = container.getBoundingClientRect();\n\n        return {\n            x: this.pageX - rect.left - scrollLeft,\n            y: this.pageY - rect.top - scrollTop,\n        };\n    }\n\n    private setDataFromMouseEvent(event: MouseEvent): void {\n        this.target = event.target;\n        this.clientX = event.clientX;\n        this.clientY = event.clientY;\n        this.pageX = event.pageX;\n        this.pageY = event.pageY;\n        this.type = event.type;\n    }\n\n    private setDataFromTouchEvent(event: TouchEvent): void {\n        const touch = event.touches[0] || event.changedTouches[0];\n\n        this.target = event.target;\n        this.clientX = touch.clientX;\n        this.clientY = touch.clientY;\n        this.pageX = touch.pageX;\n        this.pageY = touch.pageY;\n        this.type = event.type;\n\n    }\n}\n","import { Observable, fromEvent, merge, pipe } from 'rxjs';\nimport { share, map, filter, tap, switchMap, takeUntil, take, skip } from 'rxjs/operators';\n\nimport { DraggableEvent } from './DraggableEvent';\nimport { utils } from './utils';\n\nexport class Draggable {\n    static SCROLL_SPEED = 20;\n    element: Element;\n\n    dragStart: Observable<DraggableEvent>;\n    dragMove: Observable<DraggableEvent>;\n    dragStop: Observable<DraggableEvent>;\n    // A simple requestAnimationFrame polyfill\n    private requestAnimationFrame: Function;\n    private cancelAnimationFrame: Function;\n    private mousemove: Observable<{} | Event> = merge(\n        fromEvent(document, 'mousemove'),\n        fromEvent(document, 'touchmove', { passive: false })\n    ).pipe(share());\n    private mouseup: Observable<{} | Event> = merge(\n        fromEvent(document, 'mouseup'),\n        fromEvent(document, 'touchend'),\n        fromEvent(document, 'touchcancel')\n    ).pipe(share());\n    private mousedown: Observable<{} | Event>;\n    private config = {\n        handlerClass: null,\n        scroll: true,\n        scrollEdge: 36,\n        scrollDirection: null\n    };\n    // reference to auto scrolling listeners\n    private autoScrollingInterval = [];\n\n    constructor(element: Element, config = {}) {\n        this.element = element;\n        this.mousedown = merge(\n            fromEvent(element, 'mousedown'),\n            fromEvent(element, 'touchstart')\n        ).pipe(share());\n\n        this.config = { ...this.config, ...config };\n\n        this.dragStart = this.createDragStartObservable().pipe(share());\n        this.dragMove = this.createDragMoveObservable(this.dragStart);\n        this.dragStop = this.createDragStopObservable(this.dragStart);\n\n        this.fixProblemWithDnDForIE(element);\n\n        this.requestAnimationFrame =\n            window.requestAnimationFrame || (callback => setTimeout(callback, 1000 / 60));\n        this.cancelAnimationFrame = window.cancelAnimationFrame || (cafID => clearTimeout(cafID));\n    }\n\n    private createDragStartObservable(): Observable<DraggableEvent> {\n        return this.mousedown.pipe(\n            map(md => new DraggableEvent(md)),\n            filter((event: DraggableEvent) => this.isDragingByHandler(event)),\n            tap(e => {\n                if (!e.isTouchEvent()) {\n                    e.pauseEvent();\n                }\n                if (document.activeElement) {\n                    (<any>document.activeElement).blur();\n                }\n                // prevents rendering performance issues while dragging item with selection inside\n                utils.clearSelection();\n            }),\n            switchMap((startEvent: DraggableEvent) => {\n                return this.mousemove.pipe(\n                    map(mm => new DraggableEvent(mm)),\n                    filter((moveEvent: DraggableEvent) => this.inRange(startEvent, moveEvent, 5)),\n                    map(() => startEvent),\n                    takeUntil(this.mouseup),\n                    take(1)\n                );\n            })\n        );\n    }\n\n    private createDragMoveObservable(\n        dragStart: Observable<DraggableEvent>\n    ): Observable<DraggableEvent> {\n        return dragStart.pipe(\n            tap(event => {\n                this.addTouchActionNone(event.target);\n            }),\n            switchMap(startEvent => {\n                return this.mousemove.pipe(\n                    skip(1),\n                    map(mm => new DraggableEvent(mm)),\n                    tap(event => {\n                        event.pauseEvent();\n                        startEvent.pauseEvent();\n                    }),\n                    takeUntil(this.mouseup)\n                );\n            }),\n            filter(val => !!val),\n            tap((event: DraggableEvent) => {\n                if (this.config.scroll) {\n                    this.startScroll(this.element, event);\n                }\n            })\n        );\n    }\n\n    private createDragStopObservable(dragStart: Observable<DraggableEvent>): Observable<any> {\n        return dragStart.pipe(\n            switchMap(() => {\n                return this.mouseup.pipe(take(1));\n            }),\n            map(e => new DraggableEvent(e)),\n            tap(e => {\n                if (e.target) {\n                    this.removeTouchActionNone(e.target);\n                }\n                this.autoScrollingInterval.forEach(raf => this.cancelAnimationFrame(raf));\n            })\n        );\n    }\n\n    private startScroll(item: Element, event: DraggableEvent) {\n        const scrollContainer = this.getScrollContainer(item);\n        this.autoScrollingInterval.forEach(raf => this.cancelAnimationFrame(raf));\n\n        if (scrollContainer) {\n            this.startScrollForContainer(event, scrollContainer);\n        } else {\n            this.startScrollForWindow(event);\n        }\n    }\n\n    private startScrollForContainer(event: DraggableEvent, scrollContainer: HTMLElement): void {\n        if (!this.config.scrollDirection || this.config.scrollDirection === 'vertical') {\n            this.startScrollVerticallyForContainer(event, scrollContainer);\n        }\n\n        if (!this.config.scrollDirection || this.config.scrollDirection === 'horizontal') {\n            this.startScrollHorizontallyForContainer(event, scrollContainer);\n        }\n    }\n\n    private startScrollVerticallyForContainer(\n        event: DraggableEvent,\n        scrollContainer: HTMLElement\n    ): void {\n        if (event.pageY - this.getOffset(scrollContainer).top < this.config.scrollEdge) {\n            this.startAutoScrolling(scrollContainer, -Draggable.SCROLL_SPEED, 'scrollTop');\n        } else if (\n            this.getOffset(scrollContainer).top +\n                scrollContainer.getBoundingClientRect().height -\n                event.pageY <\n            this.config.scrollEdge\n        ) {\n            this.startAutoScrolling(scrollContainer, Draggable.SCROLL_SPEED, 'scrollTop');\n        }\n    }\n\n    private startScrollHorizontallyForContainer(\n        event: DraggableEvent,\n        scrollContainer: HTMLElement\n    ): void {\n        if (event.pageX - scrollContainer.getBoundingClientRect().left < this.config.scrollEdge) {\n            this.startAutoScrolling(scrollContainer, -Draggable.SCROLL_SPEED, 'scrollLeft');\n        } else if (\n            this.getOffset(scrollContainer).left +\n                scrollContainer.getBoundingClientRect().width -\n                event.pageX <\n            this.config.scrollEdge\n        ) {\n            this.startAutoScrolling(scrollContainer, Draggable.SCROLL_SPEED, 'scrollLeft');\n        }\n    }\n\n    private startScrollForWindow(event) {\n        if (!this.config.scrollDirection || this.config.scrollDirection === 'vertical') {\n            this.startScrollVerticallyForWindow(event);\n        }\n\n        if (!this.config.scrollDirection || this.config.scrollDirection === 'horizontal') {\n            this.startScrollHorizontallyForWindow(event);\n        }\n    }\n\n    private startScrollVerticallyForWindow(event: DraggableEvent): void {\n        const scrollingElement =\n            document.scrollingElement || document.documentElement || document.body;\n\n        // NOTE: Using `window.pageYOffset` here because IE doesn't have `window.scrollY`.\n        if (event.pageY - window.pageYOffset < this.config.scrollEdge) {\n            this.startAutoScrolling(scrollingElement, -Draggable.SCROLL_SPEED, 'scrollTop');\n        } else if (\n            window.innerHeight - (event.pageY - window.pageYOffset) <\n            this.config.scrollEdge\n        ) {\n            this.startAutoScrolling(scrollingElement, Draggable.SCROLL_SPEED, 'scrollTop');\n        }\n    }\n\n    private startScrollHorizontallyForWindow(event: DraggableEvent): void {\n        const scrollingElement =\n            document.scrollingElement || document.documentElement || document.body;\n\n        // NOTE: Using `window.pageXOffset` here because IE doesn't have `window.scrollX`.\n        if (event.pageX - window.pageXOffset < this.config.scrollEdge) {\n            this.startAutoScrolling(scrollingElement, -Draggable.SCROLL_SPEED, 'scrollLeft');\n        } else if (\n            window.innerWidth - (event.pageX - window.pageXOffset) <\n            this.config.scrollEdge\n        ) {\n            this.startAutoScrolling(scrollingElement, Draggable.SCROLL_SPEED, 'scrollLeft');\n        }\n    }\n\n    private getScrollContainer(node): HTMLElement {\n        const nodeOuterHeight = utils.getElementOuterHeight(node);\n\n        if (node.scrollHeight > Math.ceil(nodeOuterHeight)) {\n            return node;\n        }\n\n        if (!new RegExp('(body|html)', 'i').test(node.parentNode.tagName)) {\n            return this.getScrollContainer(node.parentNode);\n        }\n\n        return null;\n    }\n\n    private startAutoScrolling(node, amount, direction) {\n        this.autoScrollingInterval.push(\n            this.requestAnimationFrame(\n                function() {\n                    this.startAutoScrolling(node, amount, direction);\n                }.bind(this)\n            )\n        );\n\n        return (node[direction] += amount * 0.25);\n    }\n\n    private getOffset(el) {\n        const rect = el.getBoundingClientRect();\n        return {\n            left: rect.left + this.getScroll('scrollLeft', 'pageXOffset'),\n            top: rect.top + this.getScroll('scrollTop', 'pageYOffset')\n        };\n    }\n\n    private getScroll(scrollProp, offsetProp) {\n        if (typeof window[offsetProp] !== 'undefined') {\n            return window[offsetProp];\n        }\n        if (document.documentElement.clientHeight) {\n            return document.documentElement[scrollProp];\n        }\n        return document.body[scrollProp];\n    }\n\n    private isDragingByHandler(event: DraggableEvent): boolean {\n        if (!this.isValidDragHandler(event.target)) {\n            return false;\n        }\n\n        return (\n            !this.config.handlerClass ||\n            (this.config.handlerClass &&\n                this.hasElementWithClass(this.config.handlerClass, event.target))\n        );\n    }\n\n    private isValidDragHandler(targetEl: any): boolean {\n        return ['input', 'textarea'].indexOf(targetEl.tagName.toLowerCase()) === -1;\n    }\n\n    private inRange(startEvent: DraggableEvent, moveEvent: DraggableEvent, range: number): boolean {\n        return (\n            Math.abs(moveEvent.clientX - startEvent.clientX) > range ||\n            Math.abs(moveEvent.clientY - startEvent.clientY) > range\n        );\n    }\n\n    private hasElementWithClass(className: string, target: any): boolean {\n        while (target !== this.element) {\n            if (target.classList.contains(className)) {\n                return true;\n            }\n            target = target.parentElement;\n        }\n        return false;\n    }\n\n    private pauseEvent(e: Event): void {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        }\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n        e.cancelBubble = true;\n        e.returnValue = false;\n    }\n\n    private fixProblemWithDnDForIE(element: Element) {\n        if (this.isTouchDevice() && this.isIEorEdge() && (<HTMLElement>element).style) {\n            (<HTMLElement>element).style['touch-action'] = 'none';\n        }\n    }\n\n    private removeTouchActionNone(element: Element) {\n        if (!(<HTMLElement>element).style) {\n            return;\n        }\n        (<HTMLElement>element).style['touch-action'] = '';\n    }\n\n    private addTouchActionNone(element) {\n        if (!(<HTMLElement>element).style) {\n            return;\n        }\n        (<HTMLElement>element).style['touch-action'] = 'none';\n    }\n\n    private isTouchDevice() {\n        return (\n            'ontouchstart' in window || navigator.maxTouchPoints // works on most browsers\n        ); // works on IE10/11 and Surface\n    }\n\n    private isIEorEdge() {\n        const ua = window.navigator.userAgent;\n\n        const msie = ua.indexOf('MSIE ');\n        if (msie > 0) {\n            // IE 10 or older => return version number\n            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        }\n\n        const trident = ua.indexOf('Trident/');\n        if (trident > 0) {\n            // IE 11 => return version number\n            const rv = ua.indexOf('rv:');\n            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n        }\n\n        const edge = ua.indexOf('Edge/');\n        if (edge > 0) {\n            // Edge (IE 12+) => return version number\n            return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n        }\n\n        // other browser\n        return false;\n    }\n}\n","import { Component, OnInit, ElementRef, Inject, Host, Input, Output,\n    EventEmitter, SimpleChanges, OnChanges, OnDestroy, HostBinding,\n    ChangeDetectionStrategy, AfterViewInit, NgZone, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { GridsterService } from '../gridster.service';\nimport { GridsterPrototypeService } from '../gridster-prototype/gridster-prototype.service';\n\nimport { GridListItem } from '../gridList/GridListItem';\nimport { DraggableEvent } from '../utils/DraggableEvent';\nimport { Draggable } from '../utils/draggable';\nimport { IGridsterOptions } from '../IGridsterOptions';\nimport { GridList } from '../gridList/gridList';\nimport { utils } from '../utils/utils';\n\n@Component({\n    selector: 'ngx-gridster-item',\n    template: `<div class=\"gridster-item-inner\">\n      <ng-content></ng-content>\n      <div class=\"gridster-item-resizable-handler handle-s\"></div>\n      <div class=\"gridster-item-resizable-handler handle-e\"></div>\n      <div class=\"gridster-item-resizable-handler handle-n\"></div>\n      <div class=\"gridster-item-resizable-handler handle-w\"></div>\n      <div class=\"gridster-item-resizable-handler handle-se\"></div>\n      <div class=\"gridster-item-resizable-handler handle-ne\"></div>\n      <div class=\"gridster-item-resizable-handler handle-sw\"></div>\n      <div class=\"gridster-item-resizable-handler handle-nw\"></div>\n    </div>`,\n    styles: [`\n    ngx-gridster-item {\n        display: block;\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: 1;\n        -webkit-transition: none;\n        transition: none;\n    }\n\n    .gridster--ready ngx-gridster-item {\n        transition: all 200ms ease;\n        transition-property: left, top;\n    }\n\n    .gridster--ready.css-transform ngx-gridster-item  {\n        transition-property: transform;\n    }\n\n    .gridster--ready ngx-gridster-item.is-dragging,\n    .gridster--ready ngx-gridster-item.is-resizing {\n        -webkit-transition: none;\n        transition: none;\n        z-index: 9999;\n    }\n\n    ngx-gridster-item.no-transition {\n        -webkit-transition: none;\n        transition: none;\n    }\n    ngx-gridster-item .gridster-item-resizable-handler {\n        position: absolute;\n        z-index: 2;\n        display: none;\n    }\n\n    ngx-gridster-item .gridster-item-resizable-handler.handle-n {\n      cursor: n-resize;\n      height: 10px;\n      right: 0;\n      top: 0;\n      left: 0;\n    }\n\n    ngx-gridster-item .gridster-item-resizable-handler.handle-e {\n      cursor: e-resize;\n      width: 10px;\n      bottom: 0;\n      right: 0;\n      top: 0;\n    }\n\n    ngx-gridster-item .gridster-item-resizable-handler.handle-s {\n      cursor: s-resize;\n      height: 10px;\n      right: 0;\n      bottom: 0;\n      left: 0;\n    }\n\n    ngx-gridster-item .gridster-item-resizable-handler.handle-w {\n      cursor: w-resize;\n      width: 10px;\n      left: 0;\n      top: 0;\n      bottom: 0;\n    }\n\n    ngx-gridster-item .gridster-item-resizable-handler.handle-ne {\n      cursor: ne-resize;\n      width: 10px;\n      height: 10px;\n      right: 0;\n      top: 0;\n    }\n\n    ngx-gridster-item .gridster-item-resizable-handler.handle-nw {\n      cursor: nw-resize;\n      width: 10px;\n      height: 10px;\n      left: 0;\n      top: 0;\n    }\n\n    ngx-gridster-item .gridster-item-resizable-handler.handle-se {\n      cursor: se-resize;\n      width: 0;\n      height: 0;\n      right: 0;\n      bottom: 0;\n      border-style: solid;\n      border-width: 0 0 10px 10px;\n      border-color: transparent;\n    }\n\n    ngx-gridster-item .gridster-item-resizable-handler.handle-sw {\n      cursor: sw-resize;\n      width: 10px;\n      height: 10px;\n      left: 0;\n      bottom: 0;\n    }\n\n    ngx-gridster-item:hover .gridster-item-resizable-handler.handle-se {\n      border-color: transparent transparent #ccc\n    }\n    `],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class GridsterItemComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n    @Input() x: number;\n    @Output() xChange = new EventEmitter<number>(true);\n    @Input() y: number;\n    @Output() yChange = new EventEmitter<number>(true);\n\n    @Input() xSm: number;\n    @Output() xSmChange = new EventEmitter<number>(true);\n    @Input() ySm: number;\n    @Output() ySmChange = new EventEmitter<number>(true);\n\n    @Input() xMd: number;\n    @Output() xMdChange = new EventEmitter<number>(true);\n    @Input() yMd: number;\n    @Output() yMdChange = new EventEmitter<number>(true);\n\n    @Input() xLg: number;\n    @Output() xLgChange = new EventEmitter<number>(true);\n    @Input() yLg: number;\n    @Output() yLgChange = new EventEmitter<number>(true);\n\n    @Input() xXl: number;\n    @Output() xXlChange = new EventEmitter<number>(true);\n    @Input() yXl: number;\n    @Output() yXlChange = new EventEmitter<number>(true);\n\n\n    @Input() w: number;\n    @Output() wChange = new EventEmitter<number>(true);\n    @Input() h: number;\n    @Output() hChange = new EventEmitter<number>(true);\n\n    @Input() wSm: number;\n    @Output() wSmChange = new EventEmitter<number>(true);\n    @Input() hSm: number;\n    @Output() hSmChange = new EventEmitter<number>(true);\n\n    @Input() wMd: number;\n    @Output() wMdChange = new EventEmitter<number>(true);\n    @Input() hMd: number;\n    @Output() hMdChange = new EventEmitter<number>(true);\n\n    @Input() wLg: number;\n    @Output() wLgChange = new EventEmitter<number>(true);\n    @Input() hLg: number;\n    @Output() hLgChange = new EventEmitter<number>(true);\n\n    @Input() wXl: number;\n    @Output() wXlChange = new EventEmitter<number>(true);\n    @Input() hXl: number;\n    @Output() hXlChange = new EventEmitter<number>(true);\n\n    @Output() change = new EventEmitter<any>(true);\n    @Output() start = new EventEmitter<any>(true);\n    @Output() end = new EventEmitter<any>(true);\n\n    @Input() dragAndDrop = true;\n    @Input() resizable = true;\n\n    @Input() options: any = {};\n\n    autoSize: boolean;\n\n    @HostBinding('class.is-dragging') isDragging = false;\n    @HostBinding('class.is-resizing') isResizing = false;\n\n    $element: HTMLElement;\n    elementRef: ElementRef;\n    /**\n     * Gridster provider service\n     */\n    gridster: GridsterService;\n\n    item: GridListItem;\n\n    set positionX(value: number) {\n        this._positionX = value;\n    }\n    get positionX() {\n        return this._positionX;\n    }\n    set positionY(value: number) {\n        this._positionY = value;\n    }\n    get positionY() {\n        return this._positionY;\n    }\n    private _positionX: number;\n    private _positionY: number;\n\n    private defaultOptions: any = {\n        minWidth: 1,\n        minHeight: 1,\n        maxWidth: Infinity,\n        maxHeight: Infinity,\n        defaultWidth: 1,\n        defaultHeight: 1\n    };\n    private subscriptions: Array<Subscription> = [];\n    private dragSubscriptions: Array<Subscription> = [];\n    private resizeSubscriptions: Array<Subscription> = [];\n\n    constructor(private zone: NgZone,\n                private gridsterPrototypeService: GridsterPrototypeService,\n                @Inject(ElementRef) elementRef: ElementRef,\n                @Inject(GridsterService) gridster: GridsterService) {\n\n        this.gridster = gridster;\n        this.elementRef = elementRef;\n        this.$element = elementRef.nativeElement;\n\n        this.item = (new GridListItem()).setFromGridsterItem(this);\n\n        // if gridster is initialized do not show animation on new grid-item construct\n        if (this.gridster.isInitialized()) {\n            this.preventAnimation();\n        }\n    }\n\n    ngOnInit() {\n        this.options = Object.assign(this.defaultOptions, this.options);\n\n        this.w = this.w || this.options.defaultWidth;\n        this.h = this.h || this.options.defaultHeight;\n        this.wSm = this.wSm || this.w;\n        this.hSm = this.hSm || this.h;\n        this.wMd = this.wMd || this.w;\n        this.hMd = this.hMd || this.h;\n        this.wLg = this.wLg || this.w;\n        this.hLg = this.hLg || this.h;\n        this.wXl = this.wXl || this.w;\n        this.hXl = this.hXl || this.h;\n\n        if (this.gridster.isInitialized()) {\n            this.setPositionsOnItem();\n        }\n\n        this.gridster.registerItem(this.item);\n\n        this.gridster.calculateCellSize();\n        this.item.applySize();\n        this.item.applyPosition();\n\n        if (this.gridster.options.dragAndDrop && this.dragAndDrop) {\n            this.enableDragDrop();\n        }\n\n        if (this.gridster.isInitialized()) {\n            this.gridster.render();\n            this.gridster.updateCachedItems();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.gridster.options.resizable && this.item.resizable) {\n            this.enableResizable();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this.gridster.gridList) {\n            return;\n        }\n        let rerender = false;\n\n        ['w', ...Object.keys(GridListItem.W_PROPERTY_MAP).map(breakpoint => GridListItem.W_PROPERTY_MAP[breakpoint])]\n        .filter(propName => changes[propName] && !changes[propName].isFirstChange())\n        .forEach((propName: string) => {\n            if (changes[propName].currentValue > this.options.maxWidth) {\n                this[propName] = this.options.maxWidth;\n                setTimeout(() => this[propName + 'Change'].emit(this[propName]));\n            }\n            rerender = true;\n        });\n\n        ['h', ...Object.keys(GridListItem.H_PROPERTY_MAP).map(breakpoint => GridListItem.H_PROPERTY_MAP[breakpoint])]\n            .filter(propName => changes[propName] && !changes[propName].isFirstChange())\n            .forEach((propName: string) => {\n                if (changes[propName].currentValue > this.options.maxHeight) {\n                    this[propName] = this.options.maxHeight;\n                    setTimeout(() => this[propName + 'Change'].emit(this[propName]));\n                }\n                rerender = true;\n            });\n\n        ['x', 'y',\n        ...Object.keys(GridListItem.X_PROPERTY_MAP).map(breakpoint => GridListItem.X_PROPERTY_MAP[breakpoint]),\n        ...Object.keys(GridListItem.Y_PROPERTY_MAP).map(breakpoint => GridListItem.Y_PROPERTY_MAP[breakpoint])]\n            .filter(propName => changes[propName] && !changes[propName].isFirstChange())\n            .forEach((propName: string) => rerender = true);\n\n        if (changes['dragAndDrop'] && !changes['dragAndDrop'].isFirstChange()) {\n            if (changes['dragAndDrop'].currentValue && this.gridster.options.dragAndDrop) {\n                this.enableDragDrop();\n            } else {\n                this.disableDraggable();\n            }\n        }\n        if (changes['resizable'] && !changes['resizable'].isFirstChange()) {\n            if (changes['resizable'].currentValue && this.gridster.options.resizable) {\n                this.enableResizable();\n            } else {\n                this.disableResizable();\n            }\n        }\n\n        if (rerender && this.gridster.gridsterComponent.isReady) {\n            this.gridster.debounceRenderSubject.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.gridster.removeItem(this.item);\n        this.gridster.itemRemoveSubject.next(this.item);\n\n        this.subscriptions.forEach((sub: Subscription) => {\n            sub.unsubscribe();\n        });\n        this.disableDraggable();\n        this.disableResizable();\n    }\n\n    updateElemenetPosition() {\n        if (this.gridster.options.useCSSTransforms) {\n            utils.setTransform(this.$element, {x: this._positionX, y: this._positionY});\n        } else {\n            utils.setCssElementPosition(this.$element, {x: this._positionX, y: this._positionY});\n        }\n    }\n\n    setPositionsOnItem() {\n        if (!this.item.hasPositions(this.gridster.options.breakpoint)) {\n            this.setPositionsForGrid(this.gridster.options);\n        }\n\n        this.gridster.gridsterOptions.responsiveOptions\n            .filter((options: IGridsterOptions) => !this.item.hasPositions(options.breakpoint))\n            .forEach((options: IGridsterOptions) => this.setPositionsForGrid(options));\n    }\n\n    public enableResizable() {\n        if (this.resizeSubscriptions.length) {\n            return;\n        }\n\n        this.zone.runOutsideAngular(() => {\n            this.getResizeHandlers().forEach((handler) => {\n                const direction = this.getResizeDirection(handler);\n\n                if (this.hasResizableHandle(direction)) {\n                    handler.style.display = 'block';\n                }\n\n                const draggable = new Draggable(handler, this.getResizableOptions());\n\n                let startEvent;\n                let startData;\n                let cursorToElementPosition;\n\n                const dragStartSub = draggable.dragStart\n                    .subscribe((event: DraggableEvent) => {\n                        this.zone.run(() => {\n                            this.isResizing = true;\n\n                            startEvent = event;\n                            startData = this.createResizeStartObject(direction);\n                            cursorToElementPosition = event.getRelativeCoordinates(this.$element);\n\n                            this.gridster.onResizeStart(this.item);\n                            this.onStart('resize');\n                        });\n                    });\n\n                const dragSub = draggable.dragMove\n                    .subscribe((event: DraggableEvent) => {\n                        const scrollData = this.gridster.gridsterScrollData;\n\n                        this.resizeElement({\n                            direction,\n                            startData,\n                            position: {\n                                x: event.clientX - cursorToElementPosition.x - this.gridster.gridsterRect.left,\n                                y: event.clientY - cursorToElementPosition.y - this.gridster.gridsterRect.top\n                            },\n                            startEvent,\n                            moveEvent: event,\n                            scrollDiffX: scrollData.scrollLeft - startData.scrollLeft,\n                            scrollDiffY: scrollData.scrollTop - startData.scrollTop\n                        });\n\n                        this.gridster.onResizeDrag(this.item);\n                    });\n\n                const dragStopSub = draggable.dragStop\n                    .subscribe(() => {\n                        this.zone.run(() => {\n                            this.isResizing = false;\n\n                            this.gridster.onResizeStop(this.item);\n                            this.onEnd('resize');\n                        });\n                    });\n\n                this.resizeSubscriptions = this.resizeSubscriptions.concat([dragStartSub, dragSub, dragStopSub]);\n\n            });\n        });\n    }\n\n    public disableResizable() {\n        this.resizeSubscriptions.forEach((sub: Subscription) => {\n            sub.unsubscribe();\n        });\n        this.resizeSubscriptions = [];\n\n        [].forEach.call(this.$element.querySelectorAll('.gridster-item-resizable-handler'), (handler) => {\n            handler.style.display = '';\n        });\n    }\n\n    public enableDragDrop() {\n        if (this.dragSubscriptions.length) {\n            return;\n        }\n        this.zone.runOutsideAngular(() => {\n            let cursorToElementPosition;\n\n            const draggable = new Draggable(this.$element, this.getDraggableOptions());\n\n            const dragStartSub = draggable.dragStart\n                .subscribe((event: DraggableEvent) => {\n                    this.zone.run(() => {\n                        this.gridster.onStart(this.item);\n                        this.isDragging = true;\n                        this.onStart('drag');\n\n                        cursorToElementPosition = event.getRelativeCoordinates(this.$element);\n                    });\n                });\n\n            const dragSub = draggable.dragMove\n                .subscribe((event: DraggableEvent) => {\n\n                    this.positionY = (event.clientY - cursorToElementPosition.y -\n                        this.gridster.gridsterRect.top);\n                    this.positionX = (event.clientX - cursorToElementPosition.x -\n                        this.gridster.gridsterRect.left);\n                    this.updateElemenetPosition();\n\n                    this.gridster.onDrag(this.item);\n                });\n\n            const dragStopSub = draggable.dragStop\n                .subscribe(() => {\n                    this.zone.run(() => {\n                        this.gridster.onStop(this.item);\n                        this.gridster.debounceRenderSubject.next();\n                        this.isDragging = false;\n                        this.onEnd('drag');\n                    });\n                });\n\n            this.dragSubscriptions = this.dragSubscriptions.concat([dragStartSub, dragSub, dragStopSub]);\n        });\n    }\n\n    public disableDraggable() {\n        this.dragSubscriptions.forEach((sub: Subscription) => {\n            sub.unsubscribe();\n        });\n        this.dragSubscriptions = [];\n    }\n\n    private getResizeHandlers(): HTMLElement[]  {\n        return [].filter.call(this.$element.children[0].children, (el) => {\n\n            return el.classList.contains('gridster-item-resizable-handler');\n        });\n    }\n\n    private getDraggableOptions() {\n        return { scrollDirection: this.gridster.options.direction, ...this.gridster.draggableOptions };\n    }\n\n    private getResizableOptions() {\n        const resizableOptions: any = {};\n\n        if (this.gridster.draggableOptions.scroll || this.gridster.draggableOptions.scroll === false) {\n            resizableOptions.scroll = this.gridster.draggableOptions.scroll;\n        }\n        if (this.gridster.draggableOptions.scrollEdge) {\n            resizableOptions.scrollEdge = this.gridster.draggableOptions.scrollEdge;\n        }\n\n        resizableOptions.scrollDirection = this.gridster.options.direction;\n\n        return resizableOptions;\n    }\n\n    private hasResizableHandle(direction: string): boolean {\n        const isItemResizable = this.gridster.options.resizable && this.item.resizable;\n        const resizeHandles = this.gridster.options.resizeHandles;\n\n        return isItemResizable && (!resizeHandles || (resizeHandles && !!resizeHandles[direction]));\n    }\n\n    private setPositionsForGrid(options: IGridsterOptions) {\n        let x, y;\n\n        const position = this.findPosition(options);\n        x = options.direction === 'horizontal' ? position[0] : position[1];\n        y = options.direction === 'horizontal' ? position[1] : position[0];\n\n        this.item.setValueX(x, options.breakpoint);\n        this.item.setValueY(y, options.breakpoint);\n\n        setTimeout(() => {\n            this.item.triggerChangeX(options.breakpoint);\n            this.item.triggerChangeY(options.breakpoint);\n        });\n    }\n\n    private findPosition(options: IGridsterOptions): Array<number> {\n        const gridList = new GridList(\n            this.gridster.items.map(item => item.copyForBreakpoint(options.breakpoint)),\n            options\n        );\n\n        return gridList.findPositionForItem(this.item, {x: 0, y: 0});\n    }\n\n    private createResizeStartObject(direction: string) {\n        const scrollData = this.gridster.gridsterScrollData;\n\n        return {\n            top: this.positionY,\n            left: this.positionX,\n            height: parseInt(this.$element.style.height, 10),\n            width: parseInt(this.$element.style.width, 10),\n            minX: Math.max(this.item.x + this.item.w - this.options.maxWidth, 0),\n            maxX: this.item.x + this.item.w - this.options.minWidth,\n            minY: Math.max(this.item.y + this.item.h - this.options.maxHeight, 0),\n            maxY: this.item.y + this.item.h - this.options.minHeight,\n            minW: this.options.minWidth,\n            maxW: Math.min(\n                this.options.maxWidth,\n                (this.gridster.options.direction === 'vertical' && direction.indexOf('w') < 0) ?\n                this.gridster.options.lanes - this.item.x : this.options.maxWidth,\n                direction.indexOf('w') >= 0 ?\n                this.item.x + this.item.w : this.options.maxWidth\n            ),\n            minH: this.options.minHeight,\n            maxH: Math.min(\n                this.options.maxHeight,\n                (this.gridster.options.direction === 'horizontal' && direction.indexOf('n') < 0) ?\n                this.gridster.options.lanes - this.item.y : this.options.maxHeight,\n                direction.indexOf('n') >= 0 ?\n                this.item.y + this.item.h : this.options.maxHeight\n            ),\n            scrollLeft: scrollData.scrollLeft,\n            scrollTop: scrollData.scrollTop\n        };\n    }\n\n    private onEnd(actionType: string): void {\n        this.end.emit({action: actionType, item: this.item});\n    }\n\n    private onStart(actionType: string): void {\n        this.start.emit({action: actionType, item: this.item});\n    }\n\n    /**\n     * Assign class for short while to prevent animation of grid item component\n     */\n    private preventAnimation(): GridsterItemComponent {\n        this.$element.classList.add('no-transition');\n        setTimeout(() => {\n            this.$element.classList.remove('no-transition');\n        }, 500);\n\n        return this;\n    }\n\n    private getResizeDirection(handler: Element): string {\n        for (let i = handler.classList.length - 1; i >= 0; i--) {\n            if (handler.classList[i].match('handle-')) {\n                return handler.classList[i].split('-')[1];\n            }\n        }\n    }\n\n    private resizeElement(config: any): void {\n        // north\n        if (config.direction.indexOf('n') >= 0) {\n            this.resizeToNorth(config);\n        }\n        // west\n        if (config.direction.indexOf('w') >= 0) {\n            this.resizeToWest(config);\n        }\n        // east\n        if (config.direction.indexOf('e') >= 0) {\n            this.resizeToEast(config);\n        }\n        // south\n        if (config.direction.indexOf('s') >= 0) {\n            this.resizeToSouth(config);\n        }\n    }\n\n    private resizeToNorth(config: any): void {\n        const height = config.startData.height + config.startEvent.clientY -\n            config.moveEvent.clientY - config.scrollDiffY;\n\n        if (height < (config.startData.minH * this.gridster.cellHeight)) {\n            this.setMinHeight('n', config);\n        } else if (height > (config.startData.maxH * this.gridster.cellHeight)) {\n            this.setMaxHeight('n', config);\n        } else {\n            this.positionY = config.position.y;\n            this.$element.style.height = height + 'px';\n        }\n    }\n\n    private resizeToWest(config: any): void {\n        const width = config.startData.width + config.startEvent.clientX -\n            config.moveEvent.clientX - config.scrollDiffX;\n\n        if (width < (config.startData.minW * this.gridster.cellWidth)) {\n            this.setMinWidth('w', config);\n        } else if (width > (config.startData.maxW * this.gridster.cellWidth)) {\n            this.setMaxWidth('w', config);\n        } else {\n            this.positionX = config.position.x;\n            this.updateElemenetPosition();\n            this.$element.style.width = width + 'px';\n        }\n    }\n\n    private resizeToEast(config: any): void {\n        const width = config.startData.width + config.moveEvent.clientX -\n            config.startEvent.clientX + config.scrollDiffX;\n\n        if (width > (config.startData.maxW * this.gridster.cellWidth)) {\n            this.setMaxWidth('e', config);\n        } else if (width < (config.startData.minW * this.gridster.cellWidth)) {\n            this.setMinWidth('e', config);\n        } else {\n            this.$element.style.width = width + 'px';\n        }\n    }\n\n    private resizeToSouth(config: any): void {\n        const height = config.startData.height + config.moveEvent.clientY -\n            config.startEvent.clientY + config.scrollDiffY;\n\n        if (height > config.startData.maxH * this.gridster.cellHeight) {\n            this.setMaxHeight('s', config);\n        } else if (height < config.startData.minH * this.gridster.cellHeight) {\n            this.setMinHeight('s', config);\n        } else {\n            this.$element.style.height = height + 'px';\n        }\n    }\n\n    private setMinHeight(direction: string, config: any): void {\n        if (direction === 'n') {\n            this.$element.style.height = (config.startData.minH * this.gridster.cellHeight) + 'px';\n            this.positionY = config.startData.maxY * this.gridster.cellHeight;\n        } else {\n            this.$element.style.height = (config.startData.minH * this.gridster.cellHeight) + 'px';\n        }\n    }\n\n    private setMinWidth(direction: string, config: any): void {\n        if (direction === 'w') {\n            this.$element.style.width = (config.startData.minW * this.gridster.cellWidth) + 'px';\n            this.positionX = config.startData.maxX * this.gridster.cellWidth;\n            this.updateElemenetPosition();\n        } else {\n            this.$element.style.width = (config.startData.minW * this.gridster.cellWidth) + 'px';\n        }\n    }\n\n    private setMaxHeight(direction: string, config: any): void {\n\n        if (direction === 'n') {\n            this.$element.style.height = (config.startData.maxH * this.gridster.cellHeight) + 'px';\n            this.positionY = config.startData.minY * this.gridster.cellHeight;\n        } else {\n            this.$element.style.height = (config.startData.maxH * this.gridster.cellHeight) + 'px';\n        }\n    }\n\n    private setMaxWidth(direction: string, config: any): void {\n\n        if (direction === 'w') {\n            this.$element.style.width = (config.startData.maxW * this.gridster.cellWidth) + 'px';\n            this.positionX = config.startData.minX * this.gridster.cellWidth;\n            this.updateElemenetPosition();\n        } else {\n            this.$element.style.width = (config.startData.maxW * this.gridster.cellWidth) + 'px';\n        }\n    }\n}\n","import { Directive, ElementRef, Input, Output, HostBinding, EventEmitter, OnInit, OnDestroy,\n    NgZone} from '@angular/core';\nimport { Observable, Subscription, fromEvent } from 'rxjs';\n\nimport { GridsterPrototypeService } from './gridster-prototype.service';\nimport { GridListItem } from '../gridList/GridListItem';\nimport { GridsterService } from '../gridster.service';\nimport { DraggableEvent } from '../utils/DraggableEvent';\nimport { Draggable } from '../utils/draggable';\nimport { utils } from '../utils/utils';\n\n@Directive({\n    selector: '[ngxGridsterItemPrototype]'\n})\nexport class GridsterItemPrototypeDirective implements OnInit, OnDestroy {\n    @Output() drop = new EventEmitter();\n    @Output() start = new EventEmitter();\n    @Output() cancel = new EventEmitter();\n    @Output() enter = new EventEmitter();\n    @Output() out = new EventEmitter();\n\n    @Input() data: any;\n    @Input() config: any = {};\n\n    public x = 0;\n    public y = 0;\n    @Input() w: number;\n    @Input() wSm: number;\n    @Input() wMd: number;\n    @Input() wLg: number;\n    @Input() wXl: number;\n    @Input() h: number;\n    @Input() hSm: number;\n    @Input() hMd: number;\n    @Input() hLg: number;\n    @Input() hXl: number;\n\n    positionX: number;\n    positionY: number;\n\n    autoSize = false;\n\n    $element: HTMLElement;\n\n    /**\n     * Mouse drag observable\n     */\n    drag: Observable<any>;\n\n    /**\n     * Subscribtion for drag observable\n     */\n    dragSubscription: Subscription;\n\n    isDragging = false;\n\n    item: GridListItem;\n\n    containerRectange: ClientRect;\n\n    private dragContextGridster: GridsterService;\n    private parentRect: ClientRect;\n    private parentOffset: {left: number, top: number};\n\n    private subscribtions: Array<Subscription> = [];\n\n    // must be set to true because of item dragAndDrop configuration\n    get dragAndDrop(): boolean {\n        return true;\n    }\n\n    get gridster(): GridsterService {\n        return this.dragContextGridster;\n    }\n\n    constructor(private zone: NgZone,\n                private elementRef: ElementRef,\n                private gridsterPrototype: GridsterPrototypeService) {\n\n        this.item = (new GridListItem()).setFromGridsterItemPrototype(this);\n    }\n\n    ngOnInit() {\n        this.wSm = this.wSm || this.w;\n        this.hSm = this.hSm || this.h;\n        this.wMd = this.wMd || this.w;\n        this.hMd = this.hMd || this.h;\n        this.wLg = this.wLg || this.w;\n        this.hLg = this.hLg || this.h;\n        this.wXl = this.wXl || this.w;\n        this.hXl = this.hXl || this.h;\n        this.zone.runOutsideAngular(() => {\n            this.enableDragDrop();\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscribtions.forEach((sub: Subscription) => {\n            sub.unsubscribe();\n        });\n    }\n\n    onDrop (gridster: GridsterService): void {\n        if (!this.config.helper) {\n            this.$element.parentNode.removeChild(this.$element);\n        }\n\n        this.drop.emit({\n            item: this.item,\n            gridster: gridster\n        });\n    }\n\n    onCancel (): void {\n        this.cancel.emit({item: this.item});\n    }\n\n    onEnter (gridster: GridsterService): void {\n        this.enter.emit({\n            item: this.item,\n            gridster: gridster\n        });\n    }\n\n    onOver (gridster: GridsterService): void {}\n\n    onOut (gridster: GridsterService): void {\n        this.out.emit({\n            item: this.item,\n            gridster: gridster\n        });\n    }\n\n    getPositionToGridster(gridster: GridsterService) {\n        const relativeContainerCoords = this.getContainerCoordsToGridster(gridster);\n\n        return {\n            y: this.positionY - relativeContainerCoords.top,\n            x: this.positionX - relativeContainerCoords.left\n        };\n    }\n\n    setDragContextGridster(gridster: GridsterService) {\n        this.dragContextGridster = gridster;\n    }\n\n    private getContainerCoordsToGridster(gridster: GridsterService): {top: number, left: number} {\n        return {\n            left: gridster.gridsterRect.left - this.parentRect.left,\n            top: gridster.gridsterRect.top - this.parentRect.top\n        };\n    }\n\n    private enableDragDrop() {\n        let cursorToElementPosition;\n        const draggable = new Draggable(this.elementRef.nativeElement);\n\n        const dragStartSub = draggable.dragStart\n            .subscribe((event: DraggableEvent) => {\n                this.zone.run(() => {\n                    this.$element = this.provideDragElement();\n                    this.containerRectange = this.$element.parentElement.getBoundingClientRect();\n                    this.updateParentElementData();\n                    this.onStart(event);\n\n                    cursorToElementPosition = event.getRelativeCoordinates(this.$element);\n                });\n            });\n\n        const dragSub = draggable.dragMove\n            .subscribe((event: DraggableEvent) => {\n\n                this.setElementPosition(this.$element, {\n                    x: event.clientX - cursorToElementPosition.x  - this.parentRect.left,\n                    y: event.clientY - cursorToElementPosition.y  - this.parentRect.top\n                });\n\n                this.onDrag(event);\n            });\n\n        const dragStopSub = draggable.dragStop\n            .subscribe((event: DraggableEvent) => {\n                this.zone.run(() => {\n                    this.onStop(event);\n                    this.$element = null;\n                });\n            });\n\n        const scrollSub = fromEvent(document, 'scroll')\n            .subscribe(() => {\n                if (this.$element) {\n                    this.updateParentElementData();\n                }\n            });\n\n        this.subscribtions = this.subscribtions.concat([dragStartSub, dragSub, dragStopSub, scrollSub]);\n    }\n\n    private setElementPosition(element: HTMLElement, position: {x: number, y: number}) {\n        this.positionX = position.x;\n        this.positionY = position.y;\n        utils.setCssElementPosition(element, position);\n    }\n\n    private updateParentElementData() {\n        this.parentRect = this.$element.parentElement.getBoundingClientRect();\n        this.parentOffset = {\n            left: this.$element.parentElement.offsetLeft,\n            top: this.$element.parentElement.offsetTop\n        };\n    }\n\n    private onStart (event: DraggableEvent): void {\n        this.isDragging = true;\n\n        this.$element.style.pointerEvents = 'none';\n        this.$element.style.position = 'absolute';\n\n        this.gridsterPrototype.dragItemStart(this, event);\n\n        this.start.emit({item: this.item});\n    }\n\n    private onDrag (event: DraggableEvent): void {\n        this.gridsterPrototype.updatePrototypePosition(this, event);\n    }\n\n    private onStop (event: DraggableEvent): void {\n        this.gridsterPrototype.dragItemStop(this, event);\n\n        this.isDragging = false;\n        this.$element.style.pointerEvents = 'auto';\n        this.$element.style.position = '';\n        utils.resetCSSElementPosition(this.$element);\n\n        if (this.config.helper) {\n            this.$element.parentNode.removeChild(this.$element);\n        }\n    }\n\n    private provideDragElement (): HTMLElement {\n        let dragElement = this.elementRef.nativeElement;\n\n        if (this.config.helper) {\n            dragElement = <any>(dragElement).cloneNode(true);\n\n            document.body.appendChild(this.fixStylesForBodyHelper(dragElement));\n        } else {\n            this.fixStylesForRelativeElement(dragElement);\n        }\n\n        return dragElement;\n    }\n\n    private fixStylesForRelativeElement(el: HTMLElement) {\n        if (window.getComputedStyle(el).position === 'absolute') {\n            return el;\n        }\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\n        this.containerRectange = el.parentElement.getBoundingClientRect();\n\n        el.style.position = 'absolute';\n        this.setElementPosition(el, {\n            x: rect.left - this.containerRectange.left,\n            y: rect.top - this.containerRectange.top\n        });\n\n        return el;\n    }\n\n    /**\n     * When element is cloned and append to body it should have position absolute and coords set by original\n     * relative prototype element position.\n     */\n    private fixStylesForBodyHelper (el: HTMLElement) {\n        const bodyRect = document.body.getBoundingClientRect();\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\n\n        el.style.position = 'absolute';\n        this.setElementPosition(el, {\n            x: rect.left - bodyRect.left,\n            y: rect.top - bodyRect.top\n        });\n\n        return el;\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GridsterComponent } from './gridster.component';\nimport { GridsterItemComponent } from './gridster-item/gridster-item.component';\nimport { GridsterItemPrototypeDirective } from './gridster-prototype/gridster-item-prototype.directive';\nimport { GridsterPrototypeService } from './gridster-prototype/gridster-prototype.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        GridsterComponent,\n        GridsterItemComponent,\n        GridsterItemPrototypeDirective\n    ],\n    exports: [\n        GridsterComponent,\n        GridsterItemComponent,\n        GridsterItemPrototypeDirective\n    ]\n})\nexport class GridsterModule {\n    static forRoot(): ModuleWithProviders<GridsterModule> {\n    return {\n        ngModule: GridsterModule,\n        providers: [GridsterPrototypeService]\n    };\n}\n}\n\n"]}