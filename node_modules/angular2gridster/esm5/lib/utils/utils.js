var ɵ0 = function ($element, position) {
    $element.style.left = position.x + 'px';
    $element.style.top = position.y + 'px';
}, ɵ1 = function ($element) {
    $element.style.left = '';
    $element.style.top = '';
}, ɵ2 = function ($element, position) {
    var left = position.x;
    var top = position.y;
    // Replace unitless items with px
    var translate = "translate(" + left + "px," + top + "px)";
    $element.style['transform'] = translate;
    $element.style['WebkitTransform'] = translate;
    $element.style['MozTransform'] = translate;
    $element.style['msTransform'] = translate;
    $element.style['OTransform'] = translate;
}, ɵ3 = function ($element) {
    $element.style['transform'] = '';
    $element.style['WebkitTransform'] = '';
    $element.style['MozTransform'] = '';
    $element.style['msTransform'] = '';
    $element.style['OTransform'] = '';
}, ɵ4 = function () {
    if (document['selection']) {
        document['selection'].empty();
    }
    else if (window.getSelection) {
        window.getSelection().removeAllRanges();
    }
}, ɵ5 = function (element, containerEl) {
    var containerRect = containerEl.getBoundingClientRect();
    var elRect = element.getBoundingClientRect();
    return elRect.left > containerRect.left &&
        elRect.right < containerRect.right &&
        elRect.top > containerRect.top &&
        elRect.bottom < containerRect.bottom;
}, ɵ6 = function (element, containerEl) {
    var containerRect = containerEl.getBoundingClientRect();
    var elRect = element.getBoundingClientRect();
    var elWidth = elRect.right - elRect.left;
    var elHeight = elRect.bottom - elRect.top;
    return (elRect.left + (elWidth / 2)) > containerRect.left &&
        (elRect.right - (elWidth / 2)) < containerRect.right &&
        (elRect.top + (elHeight / 2)) > containerRect.top &&
        (elRect.bottom - (elHeight / 2)) < containerRect.bottom;
}, ɵ7 = function (element, containerEl) {
    var containerRect = containerEl.getBoundingClientRect();
    var elRect = element.getBoundingClientRect();
    return elRect.right > containerRect.left &&
        elRect.bottom > containerRect.top &&
        elRect.left < containerRect.right &&
        elRect.top < containerRect.bottom;
}, ɵ8 = function (event, element) {
    var elRect = element.getBoundingClientRect();
    return event.pageX > elRect.left &&
        event.pageX < elRect.right &&
        event.pageY > elRect.top &&
        event.pageY < elRect.bottom;
}, ɵ9 = function ($element) {
    var styleObj = window.getComputedStyle($element);
    // NOTE: Manually calculating height because IE's `clientHeight` isn't always
    // reliable.
    return parseFloat(styleObj.getPropertyValue('height')) +
        parseFloat(styleObj.getPropertyValue('padding-top')) +
        parseFloat(styleObj.getPropertyValue('padding-bottom'));
}, ɵ10 = function (element, parentElement) {
    var parentElementRect = parentElement.getBoundingClientRect();
    var elementRect = element.getBoundingClientRect();
    return {
        top: elementRect.top - parentElementRect.top,
        left: elementRect.left - parentElementRect.left
    };
};
export var utils = {
    setCssElementPosition: ɵ0,
    resetCSSElementPosition: ɵ1,
    setTransform: ɵ2,
    resetTransform: ɵ3,
    clearSelection: ɵ4,
    isElementFitContainer: ɵ5,
    isElementIntersectContainer: ɵ6,
    isElementTouchContainer: ɵ7,
    isCursorAboveElement: ɵ8,
    getElementOuterHeight: ɵ9,
    getRelativeCoordinates: ɵ10,
    getScrollableContainer: function (node) {
        var regex = /(auto|scroll)/;
        var parents = function (_node, ps) {
            if (_node.parentNode === null) {
                return ps;
            }
            return parents(_node.parentNode, ps.concat([_node]));
        };
        var style = function (_node, prop) {
            return getComputedStyle(_node, null).getPropertyValue(prop);
        };
        var overflow = function (_node) {
            return (style(_node, 'overflow') + style(_node, 'overflow-y') + style(_node, 'overflow-x'));
        };
        var scroll = function (_node) { return regex.test(overflow(_node)); };
        /* eslint-disable consistent-return */
        var scrollParent = function (_node) {
            if (!(_node instanceof HTMLElement || _node instanceof SVGElement)) {
                return;
            }
            var ps = parents(_node.parentNode, []);
            for (var i = 0; i < ps.length; i += 1) {
                if (scroll(ps[i])) {
                    return ps[i];
                }
            }
            return document.scrollingElement || document.documentElement;
        };
        return scrollParent(node);
    }
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10 };
//# sourceMappingURL=data:application/json;base64,