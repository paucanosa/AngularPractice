var DraggableEvent = /** @class */ (function () {
    function DraggableEvent(event) {
        if (event.touches) {
            this.touchEvent = event;
            this.setDataFromTouchEvent(this.touchEvent);
        }
        else {
            this.mouseEvent = event;
            this.setDataFromMouseEvent(this.mouseEvent);
        }
    }
    DraggableEvent.prototype.isTouchEvent = function () {
        return !!this.touchEvent;
    };
    DraggableEvent.prototype.pauseEvent = function () {
        var event = this.touchEvent || this.mouseEvent;
        if (event.stopPropagation) {
            event.stopPropagation();
        }
        if (event.preventDefault) {
            event.preventDefault();
        }
        event.cancelBubble = true;
        event.returnValue = false;
        return false;
    };
    DraggableEvent.prototype.getRelativeCoordinates = function (container) {
        var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;
        var rect = container.getBoundingClientRect();
        return {
            x: this.pageX - rect.left - scrollLeft,
            y: this.pageY - rect.top - scrollTop,
        };
    };
    DraggableEvent.prototype.setDataFromMouseEvent = function (event) {
        this.target = event.target;
        this.clientX = event.clientX;
        this.clientY = event.clientY;
        this.pageX = event.pageX;
        this.pageY = event.pageY;
        this.type = event.type;
    };
    DraggableEvent.prototype.setDataFromTouchEvent = function (event) {
        var touch = event.touches[0] || event.changedTouches[0];
        this.target = event.target;
        this.clientX = touch.clientX;
        this.clientY = touch.clientY;
        this.pageX = touch.pageX;
        this.pageY = touch.pageY;
        this.type = event.type;
    };
    return DraggableEvent;
}());
export { DraggableEvent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHJhZ2dhYmxlRXZlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMmdyaWRzdGVyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL0RyYWdnYWJsZUV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBa0JJLHdCQUFZLEtBQVU7UUFDbEIsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBZ0IsS0FBTSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDL0M7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEdBQWdCLEtBQU0sQ0FBQztZQUN0QyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQy9DO0lBQ0wsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDSSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzdCLENBQUM7SUFFRCxtQ0FBVSxHQUFWO1FBQ0ksSUFBTSxLQUFLLEdBQVUsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRXhELElBQUksS0FBSyxDQUFDLGVBQWUsRUFBRTtZQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDM0I7UUFDRCxJQUFJLEtBQUssQ0FBQyxjQUFjLEVBQUU7WUFDdEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQzFCO1FBQ0QsS0FBSyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDMUIsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELCtDQUFzQixHQUF0QixVQUF1QixTQUFzQjtRQUN6QyxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxJQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3RHLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFFekcsSUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFFL0MsT0FBTztZQUNILENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVTtZQUN0QyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVM7U0FDdkMsQ0FBQztJQUNOLENBQUM7SUFFTyw4Q0FBcUIsR0FBN0IsVUFBOEIsS0FBaUI7UUFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVPLDhDQUFxQixHQUE3QixVQUE4QixLQUFpQjtRQUMzQyxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFFM0IsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0FBQyxBQTlFRCxJQThFQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBEcmFnZ2FibGVFdmVudCB7XG4gICAgY2xpZW50WDogbnVtYmVyO1xuXG4gICAgY2xpZW50WTogbnVtYmVyO1xuXG4gICAgcGFnZVg6IG51bWJlcjtcblxuICAgIHBhZ2VZOiBudW1iZXI7XG5cbiAgICB0YXJnZXQ6IGFueTtcblxuICAgIHR5cGU6IHN0cmluZztcblxuXG4gICAgcHJpdmF0ZSB0b3VjaEV2ZW50OiBUb3VjaEV2ZW50O1xuXG4gICAgcHJpdmF0ZSBtb3VzZUV2ZW50OiBNb3VzZUV2ZW50O1xuXG4gICAgY29uc3RydWN0b3IoZXZlbnQ6IGFueSkge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICAgICAgdGhpcy50b3VjaEV2ZW50ID0gKDxUb3VjaEV2ZW50PmV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YUZyb21Ub3VjaEV2ZW50KHRoaXMudG91Y2hFdmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1vdXNlRXZlbnQgPSAoPE1vdXNlRXZlbnQ+ZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5zZXREYXRhRnJvbU1vdXNlRXZlbnQodGhpcy5tb3VzZUV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzVG91Y2hFdmVudCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy50b3VjaEV2ZW50O1xuICAgIH1cblxuICAgIHBhdXNlRXZlbnQoKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50OiBFdmVudCA9IHRoaXMudG91Y2hFdmVudCB8fCB0aGlzLm1vdXNlRXZlbnQ7XG5cbiAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRSZWxhdGl2ZUNvb3JkaW5hdGVzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiB7eDogbnVtYmVyLCB5OiBudW1iZXJ9IHtcbiAgICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgICAgIGNvbnN0IHNjcm9sbExlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0O1xuXG4gICAgICAgIGNvbnN0IHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHRoaXMucGFnZVggLSByZWN0LmxlZnQgLSBzY3JvbGxMZWZ0LFxuICAgICAgICAgICAgeTogdGhpcy5wYWdlWSAtIHJlY3QudG9wIC0gc2Nyb2xsVG9wLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0RGF0YUZyb21Nb3VzZUV2ZW50KGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICB0aGlzLmNsaWVudFggPSBldmVudC5jbGllbnRYO1xuICAgICAgICB0aGlzLmNsaWVudFkgPSBldmVudC5jbGllbnRZO1xuICAgICAgICB0aGlzLnBhZ2VYID0gZXZlbnQucGFnZVg7XG4gICAgICAgIHRoaXMucGFnZVkgPSBldmVudC5wYWdlWTtcbiAgICAgICAgdGhpcy50eXBlID0gZXZlbnQudHlwZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldERhdGFGcm9tVG91Y2hFdmVudChldmVudDogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF0gfHwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG5cbiAgICAgICAgdGhpcy50YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIHRoaXMuY2xpZW50WCA9IHRvdWNoLmNsaWVudFg7XG4gICAgICAgIHRoaXMuY2xpZW50WSA9IHRvdWNoLmNsaWVudFk7XG4gICAgICAgIHRoaXMucGFnZVggPSB0b3VjaC5wYWdlWDtcbiAgICAgICAgdGhpcy5wYWdlWSA9IHRvdWNoLnBhZ2VZO1xuICAgICAgICB0aGlzLnR5cGUgPSBldmVudC50eXBlO1xuXG4gICAgfVxufVxuIl19