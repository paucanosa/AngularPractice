import { of, fromEvent, merge } from 'rxjs';
import { debounceTime, map, distinctUntilChanged } from 'rxjs/operators';
export class GridsterOptions {
    constructor(config, gridsterElement) {
        this.defaults = {
            lanes: 5,
            direction: 'horizontal',
            widthHeightRatio: 1,
            shrink: false,
            responsiveView: true,
            responsiveSizes: false,
            responsiveToParent: false,
            dragAndDrop: true,
            resizable: false,
            useCSSTransforms: false,
            floating: true,
            tolerance: 'pointer'
        };
        this.responsiveOptions = [];
        this.breakpointsMap = {
            sm: 576,
            md: 768,
            lg: 992,
            xl: 1200 // Extra large
        };
        const responsiveContainer = config.responsiveToParent ? gridsterElement : window;
        this.basicOptions = config;
        this.responsiveOptions = this.extendResponsiveOptions(config.responsiveOptions || []);
        this.change = merge(of(this.getOptionsByWidth(this.getElementWidth(responsiveContainer))), fromEvent(window, 'resize').pipe(debounceTime(config.responsiveDebounce || 0), map((event) => this.getOptionsByWidth(this.getElementWidth(responsiveContainer))))).pipe(distinctUntilChanged(null, (options) => options.minWidth));
    }
    getOptionsByWidth(width) {
        let i = 0;
        let options = Object.assign({}, this.defaults, this.basicOptions);
        while (this.responsiveOptions[i]) {
            if (this.responsiveOptions[i].minWidth <= width) {
                options = this.responsiveOptions[i];
            }
            i++;
        }
        return options;
    }
    extendResponsiveOptions(responsiveOptions) {
        return responsiveOptions
            // responsive options are valid only with "breakpoint" property
            .filter(options => options.breakpoint)
            // set default minWidth if not given
            .map((options) => {
            return Object.assign({
                minWidth: this.breakpointsMap[options.breakpoint] || 0
            }, options);
        })
            .sort((curr, next) => curr.minWidth - next.minWidth)
            .map((options) => Object.assign({}, this.defaults, this.basicOptions, options));
    }
    getElementWidth($element) {
        if ($element === window) {
            return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        }
        return $element.clientWidth;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JpZHN0ZXJPcHRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjJncmlkc3Rlci8iLCJzb3VyY2VzIjpbImxpYi9Hcmlkc3Rlck9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLEVBQUUsRUFBRSxTQUFTLEVBQVEsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJekUsTUFBTSxPQUFPLGVBQWU7SUF5Q3hCLFlBQVksTUFBd0IsRUFBRSxlQUE0QjtRQTNCbEUsYUFBUSxHQUFxQjtZQUN6QixLQUFLLEVBQUUsQ0FBQztZQUNSLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLGdCQUFnQixFQUFFLENBQUM7WUFDbkIsTUFBTSxFQUFFLEtBQUs7WUFDYixjQUFjLEVBQUUsSUFBSTtZQUNwQixlQUFlLEVBQUUsS0FBSztZQUN0QixrQkFBa0IsRUFBRSxLQUFLO1lBQ3pCLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLGdCQUFnQixFQUFFLEtBQUs7WUFDdkIsUUFBUSxFQUFFLElBQUk7WUFDZCxTQUFTLEVBQUUsU0FBUztTQUN2QixDQUFDO1FBSUYsc0JBQWlCLEdBQTRCLEVBQUUsQ0FBQztRQUdoRCxtQkFBYyxHQUFHO1lBQ2IsRUFBRSxFQUFFLEdBQUc7WUFDUCxFQUFFLEVBQUUsR0FBRztZQUNQLEVBQUUsRUFBRSxHQUFHO1lBQ1AsRUFBRSxFQUFFLElBQUksQ0FBQyxjQUFjO1NBQzFCLENBQUM7UUFHRSxNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFakYsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUM7UUFFdEYsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQ1gsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxFQUNyRSxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDNUIsWUFBWSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLENBQUMsRUFDNUMsR0FBRyxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FDM0YsQ0FDSixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxLQUFhO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksT0FBTyxHQUFxQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwRixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksS0FBSyxFQUFFO2dCQUM3QyxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZDO1lBQ0QsQ0FBQyxFQUFFLENBQUM7U0FDUDtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxpQkFBMEM7UUFDdEUsT0FBTyxpQkFBaUI7WUFDcEIsK0RBQStEO2FBQzlELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDdEMsb0NBQW9DO2FBQ25DLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2IsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQzthQUN6RCxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hCLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUNuRCxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFtQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxRyxDQUFDO0lBRU8sZUFBZSxDQUFDLFFBQWE7UUFDakMsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO1lBQ3JCLE9BQU8sTUFBTSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNqRztRQUVELE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQztJQUNoQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgZnJvbUV2ZW50LCBwaXBlLCBtZXJnZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBtYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBJR3JpZHN0ZXJPcHRpb25zIH0gZnJvbSAnLi9JR3JpZHN0ZXJPcHRpb25zJztcblxuZXhwb3J0IGNsYXNzIEdyaWRzdGVyT3B0aW9ucyB7XG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgbGFuZXM6IG51bWJlcjtcbiAgICB3aWR0aEhlaWdodFJhdGlvOiBudW1iZXI7XG4gICAgaGVpZ2h0VG9Gb250U2l6ZVJhdGlvOiBudW1iZXI7XG4gICAgcmVzcG9uc2l2ZVZpZXc6IGJvb2xlYW47XG4gICAgcmVzcG9uc2l2ZVNpemVzOiBib29sZWFuO1xuICAgIHJlc3BvbnNpdmVUb1BhcmVudDogYm9vbGVhbjtcbiAgICBkcmFnQW5kRHJvcDogYm9vbGVhbjtcbiAgICByZXNpemFibGU6IGJvb2xlYW47XG4gICAgc2hyaW5rOiBib29sZWFuO1xuICAgIG1pbldpZHRoOiBudW1iZXI7XG4gICAgdXNlQ1NTVHJhbnNmb3JtczogYm9vbGVhbjtcblxuICAgIGRlZmF1bHRzOiBJR3JpZHN0ZXJPcHRpb25zID0ge1xuICAgICAgICBsYW5lczogNSxcbiAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIHdpZHRoSGVpZ2h0UmF0aW86IDEsXG4gICAgICAgIHNocmluazogZmFsc2UsXG4gICAgICAgIHJlc3BvbnNpdmVWaWV3OiB0cnVlLFxuICAgICAgICByZXNwb25zaXZlU2l6ZXM6IGZhbHNlLFxuICAgICAgICByZXNwb25zaXZlVG9QYXJlbnQ6IGZhbHNlLFxuICAgICAgICBkcmFnQW5kRHJvcDogdHJ1ZSxcbiAgICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgICAgdXNlQ1NTVHJhbnNmb3JtczogZmFsc2UsXG4gICAgICAgIGZsb2F0aW5nOiB0cnVlLFxuICAgICAgICB0b2xlcmFuY2U6ICdwb2ludGVyJ1xuICAgIH07XG5cbiAgICBjaGFuZ2U6IE9ic2VydmFibGU8SUdyaWRzdGVyT3B0aW9ucz47XG5cbiAgICByZXNwb25zaXZlT3B0aW9uczogQXJyYXk8SUdyaWRzdGVyT3B0aW9ucz4gPSBbXTtcbiAgICBiYXNpY09wdGlvbnM6IElHcmlkc3Rlck9wdGlvbnM7XG5cbiAgICBicmVha3BvaW50c01hcCA9IHtcbiAgICAgICAgc206IDU3NiwgLy8gU21hbGwgZGV2aWNlc1xuICAgICAgICBtZDogNzY4LCAvLyBNZWRpdW0gZGV2aWNlc1xuICAgICAgICBsZzogOTkyLCAvLyBMYXJnZSBkZXZpY2VzXG4gICAgICAgIHhsOiAxMjAwIC8vIEV4dHJhIGxhcmdlXG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogSUdyaWRzdGVyT3B0aW9ucywgZ3JpZHN0ZXJFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb25zdCByZXNwb25zaXZlQ29udGFpbmVyID0gY29uZmlnLnJlc3BvbnNpdmVUb1BhcmVudCA/IGdyaWRzdGVyRWxlbWVudCA6IHdpbmRvdztcblxuICAgICAgICB0aGlzLmJhc2ljT3B0aW9ucyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5yZXNwb25zaXZlT3B0aW9ucyA9IHRoaXMuZXh0ZW5kUmVzcG9uc2l2ZU9wdGlvbnMoY29uZmlnLnJlc3BvbnNpdmVPcHRpb25zIHx8IFtdKTtcblxuICAgICAgICB0aGlzLmNoYW5nZSA9IG1lcmdlKFxuICAgICAgICAgICAgICAgIG9mKHRoaXMuZ2V0T3B0aW9uc0J5V2lkdGgodGhpcy5nZXRFbGVtZW50V2lkdGgocmVzcG9uc2l2ZUNvbnRhaW5lcikpKSxcbiAgICAgICAgICAgICAgICBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lKGNvbmZpZy5yZXNwb25zaXZlRGVib3VuY2UgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoZXZlbnQ6IEV2ZW50KSA9PiB0aGlzLmdldE9wdGlvbnNCeVdpZHRoKHRoaXMuZ2V0RWxlbWVudFdpZHRoKHJlc3BvbnNpdmVDb250YWluZXIpKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQobnVsbCwgKG9wdGlvbnM6IGFueSkgPT4gb3B0aW9ucy5taW5XaWR0aCkpO1xuICAgIH1cblxuICAgIGdldE9wdGlvbnNCeVdpZHRoKHdpZHRoOiBudW1iZXIpOiBJR3JpZHN0ZXJPcHRpb25zIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBsZXQgb3B0aW9uczogSUdyaWRzdGVyT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdHMsIHRoaXMuYmFzaWNPcHRpb25zKTtcblxuICAgICAgICB3aGlsZSAodGhpcy5yZXNwb25zaXZlT3B0aW9uc1tpXSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzcG9uc2l2ZU9wdGlvbnNbaV0ubWluV2lkdGggPD0gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5yZXNwb25zaXZlT3B0aW9uc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgZXh0ZW5kUmVzcG9uc2l2ZU9wdGlvbnMocmVzcG9uc2l2ZU9wdGlvbnM6IEFycmF5PElHcmlkc3Rlck9wdGlvbnM+KTogQXJyYXk8SUdyaWRzdGVyT3B0aW9ucz4ge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2l2ZU9wdGlvbnNcbiAgICAgICAgICAgIC8vIHJlc3BvbnNpdmUgb3B0aW9ucyBhcmUgdmFsaWQgb25seSB3aXRoIFwiYnJlYWtwb2ludFwiIHByb3BlcnR5XG4gICAgICAgICAgICAuZmlsdGVyKG9wdGlvbnMgPT4gb3B0aW9ucy5icmVha3BvaW50KVxuICAgICAgICAgICAgLy8gc2V0IGRlZmF1bHQgbWluV2lkdGggaWYgbm90IGdpdmVuXG4gICAgICAgICAgICAubWFwKChvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogdGhpcy5icmVha3BvaW50c01hcFtvcHRpb25zLmJyZWFrcG9pbnRdIHx8IDBcbiAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc29ydCgoY3VyciwgbmV4dCkgPT4gY3Vyci5taW5XaWR0aCAtIG5leHQubWluV2lkdGgpXG4gICAgICAgICAgICAubWFwKChvcHRpb25zKSA9PiA8SUdyaWRzdGVyT3B0aW9ucz5PYmplY3QuYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRzLCB0aGlzLmJhc2ljT3B0aW9ucywgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RWxlbWVudFdpZHRoKCRlbGVtZW50OiBhbnkpIHtcbiAgICAgICAgaWYgKCRlbGVtZW50ID09PSB3aW5kb3cpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAkZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICB9XG59XG4iXX0=