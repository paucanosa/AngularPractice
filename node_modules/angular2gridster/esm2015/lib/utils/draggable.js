import { fromEvent, merge } from 'rxjs';
import { share, map, filter, tap, switchMap, takeUntil, take, skip } from 'rxjs/operators';
import { DraggableEvent } from './DraggableEvent';
import { utils } from './utils';
export class Draggable {
    constructor(element, config = {}) {
        this.mousemove = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'touchmove', { passive: false })).pipe(share());
        this.mouseup = merge(fromEvent(document, 'mouseup'), fromEvent(document, 'touchend'), fromEvent(document, 'touchcancel')).pipe(share());
        this.config = {
            handlerClass: null,
            scroll: true,
            scrollEdge: 36,
            scrollDirection: null
        };
        // reference to auto scrolling listeners
        this.autoScrollingInterval = [];
        this.element = element;
        this.mousedown = merge(fromEvent(element, 'mousedown'), fromEvent(element, 'touchstart')).pipe(share());
        this.config = Object.assign(Object.assign({}, this.config), config);
        this.dragStart = this.createDragStartObservable().pipe(share());
        this.dragMove = this.createDragMoveObservable(this.dragStart);
        this.dragStop = this.createDragStopObservable(this.dragStart);
        this.fixProblemWithDnDForIE(element);
        this.requestAnimationFrame =
            window.requestAnimationFrame || (callback => setTimeout(callback, 1000 / 60));
        this.cancelAnimationFrame = window.cancelAnimationFrame || (cafID => clearTimeout(cafID));
    }
    createDragStartObservable() {
        return this.mousedown.pipe(map(md => new DraggableEvent(md)), filter((event) => this.isDragingByHandler(event)), tap(e => {
            if (!e.isTouchEvent()) {
                e.pauseEvent();
            }
            if (document.activeElement) {
                document.activeElement.blur();
            }
            // prevents rendering performance issues while dragging item with selection inside
            utils.clearSelection();
        }), switchMap((startEvent) => {
            return this.mousemove.pipe(map(mm => new DraggableEvent(mm)), filter((moveEvent) => this.inRange(startEvent, moveEvent, 5)), map(() => startEvent), takeUntil(this.mouseup), take(1));
        }));
    }
    createDragMoveObservable(dragStart) {
        return dragStart.pipe(tap(event => {
            this.addTouchActionNone(event.target);
        }), switchMap(startEvent => {
            return this.mousemove.pipe(skip(1), map(mm => new DraggableEvent(mm)), tap(event => {
                event.pauseEvent();
                startEvent.pauseEvent();
            }), takeUntil(this.mouseup));
        }), filter(val => !!val), tap((event) => {
            if (this.config.scroll) {
                this.startScroll(this.element, event);
            }
        }));
    }
    createDragStopObservable(dragStart) {
        return dragStart.pipe(switchMap(() => {
            return this.mouseup.pipe(take(1));
        }), map(e => new DraggableEvent(e)), tap(e => {
            if (e.target) {
                this.removeTouchActionNone(e.target);
            }
            this.autoScrollingInterval.forEach(raf => this.cancelAnimationFrame(raf));
        }));
    }
    startScroll(item, event) {
        const scrollContainer = this.getScrollContainer(item);
        this.autoScrollingInterval.forEach(raf => this.cancelAnimationFrame(raf));
        if (scrollContainer) {
            this.startScrollForContainer(event, scrollContainer);
        }
        else {
            this.startScrollForWindow(event);
        }
    }
    startScrollForContainer(event, scrollContainer) {
        if (!this.config.scrollDirection || this.config.scrollDirection === 'vertical') {
            this.startScrollVerticallyForContainer(event, scrollContainer);
        }
        if (!this.config.scrollDirection || this.config.scrollDirection === 'horizontal') {
            this.startScrollHorizontallyForContainer(event, scrollContainer);
        }
    }
    startScrollVerticallyForContainer(event, scrollContainer) {
        if (event.pageY - this.getOffset(scrollContainer).top < this.config.scrollEdge) {
            this.startAutoScrolling(scrollContainer, -Draggable.SCROLL_SPEED, 'scrollTop');
        }
        else if (this.getOffset(scrollContainer).top +
            scrollContainer.getBoundingClientRect().height -
            event.pageY <
            this.config.scrollEdge) {
            this.startAutoScrolling(scrollContainer, Draggable.SCROLL_SPEED, 'scrollTop');
        }
    }
    startScrollHorizontallyForContainer(event, scrollContainer) {
        if (event.pageX - scrollContainer.getBoundingClientRect().left < this.config.scrollEdge) {
            this.startAutoScrolling(scrollContainer, -Draggable.SCROLL_SPEED, 'scrollLeft');
        }
        else if (this.getOffset(scrollContainer).left +
            scrollContainer.getBoundingClientRect().width -
            event.pageX <
            this.config.scrollEdge) {
            this.startAutoScrolling(scrollContainer, Draggable.SCROLL_SPEED, 'scrollLeft');
        }
    }
    startScrollForWindow(event) {
        if (!this.config.scrollDirection || this.config.scrollDirection === 'vertical') {
            this.startScrollVerticallyForWindow(event);
        }
        if (!this.config.scrollDirection || this.config.scrollDirection === 'horizontal') {
            this.startScrollHorizontallyForWindow(event);
        }
    }
    startScrollVerticallyForWindow(event) {
        const scrollingElement = document.scrollingElement || document.documentElement || document.body;
        // NOTE: Using `window.pageYOffset` here because IE doesn't have `window.scrollY`.
        if (event.pageY - window.pageYOffset < this.config.scrollEdge) {
            this.startAutoScrolling(scrollingElement, -Draggable.SCROLL_SPEED, 'scrollTop');
        }
        else if (window.innerHeight - (event.pageY - window.pageYOffset) <
            this.config.scrollEdge) {
            this.startAutoScrolling(scrollingElement, Draggable.SCROLL_SPEED, 'scrollTop');
        }
    }
    startScrollHorizontallyForWindow(event) {
        const scrollingElement = document.scrollingElement || document.documentElement || document.body;
        // NOTE: Using `window.pageXOffset` here because IE doesn't have `window.scrollX`.
        if (event.pageX - window.pageXOffset < this.config.scrollEdge) {
            this.startAutoScrolling(scrollingElement, -Draggable.SCROLL_SPEED, 'scrollLeft');
        }
        else if (window.innerWidth - (event.pageX - window.pageXOffset) <
            this.config.scrollEdge) {
            this.startAutoScrolling(scrollingElement, Draggable.SCROLL_SPEED, 'scrollLeft');
        }
    }
    getScrollContainer(node) {
        const nodeOuterHeight = utils.getElementOuterHeight(node);
        if (node.scrollHeight > Math.ceil(nodeOuterHeight)) {
            return node;
        }
        if (!new RegExp('(body|html)', 'i').test(node.parentNode.tagName)) {
            return this.getScrollContainer(node.parentNode);
        }
        return null;
    }
    startAutoScrolling(node, amount, direction) {
        this.autoScrollingInterval.push(this.requestAnimationFrame(function () {
            this.startAutoScrolling(node, amount, direction);
        }.bind(this)));
        return (node[direction] += amount * 0.25);
    }
    getOffset(el) {
        const rect = el.getBoundingClientRect();
        return {
            left: rect.left + this.getScroll('scrollLeft', 'pageXOffset'),
            top: rect.top + this.getScroll('scrollTop', 'pageYOffset')
        };
    }
    getScroll(scrollProp, offsetProp) {
        if (typeof window[offsetProp] !== 'undefined') {
            return window[offsetProp];
        }
        if (document.documentElement.clientHeight) {
            return document.documentElement[scrollProp];
        }
        return document.body[scrollProp];
    }
    isDragingByHandler(event) {
        if (!this.isValidDragHandler(event.target)) {
            return false;
        }
        return (!this.config.handlerClass ||
            (this.config.handlerClass &&
                this.hasElementWithClass(this.config.handlerClass, event.target)));
    }
    isValidDragHandler(targetEl) {
        return ['input', 'textarea'].indexOf(targetEl.tagName.toLowerCase()) === -1;
    }
    inRange(startEvent, moveEvent, range) {
        return (Math.abs(moveEvent.clientX - startEvent.clientX) > range ||
            Math.abs(moveEvent.clientY - startEvent.clientY) > range);
    }
    hasElementWithClass(className, target) {
        while (target !== this.element) {
            if (target.classList.contains(className)) {
                return true;
            }
            target = target.parentElement;
        }
        return false;
    }
    pauseEvent(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
        }
        if (e.preventDefault) {
            e.preventDefault();
        }
        e.cancelBubble = true;
        e.returnValue = false;
    }
    fixProblemWithDnDForIE(element) {
        if (this.isTouchDevice() && this.isIEorEdge() && element.style) {
            element.style['touch-action'] = 'none';
        }
    }
    removeTouchActionNone(element) {
        if (!element.style) {
            return;
        }
        element.style['touch-action'] = '';
    }
    addTouchActionNone(element) {
        if (!element.style) {
            return;
        }
        element.style['touch-action'] = 'none';
    }
    isTouchDevice() {
        return ('ontouchstart' in window || navigator.maxTouchPoints // works on most browsers
        ); // works on IE10/11 and Surface
    }
    isIEorEdge() {
        const ua = window.navigator.userAgent;
        const msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        }
        const trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            const rv = ua.indexOf('rv:');
            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
        }
        const edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
        }
        // other browser
        return false;
    }
}
Draggable.SCROLL_SPEED = 20;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjJncmlkc3Rlci8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kcmFnZ2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFNBQVMsRUFBRSxLQUFLLEVBQVEsTUFBTSxNQUFNLENBQUM7QUFDMUQsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxNQUFNLE9BQU8sU0FBUztJQTZCbEIsWUFBWSxPQUFnQixFQUFFLE1BQU0sR0FBRyxFQUFFO1FBbkJqQyxjQUFTLEdBQTJCLEtBQUssQ0FDN0MsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFDaEMsU0FBUyxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FDdkQsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNSLFlBQU8sR0FBMkIsS0FBSyxDQUMzQyxTQUFTLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxFQUM5QixTQUFTLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxFQUMvQixTQUFTLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUNyQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRVIsV0FBTSxHQUFHO1lBQ2IsWUFBWSxFQUFFLElBQUk7WUFDbEIsTUFBTSxFQUFFLElBQUk7WUFDWixVQUFVLEVBQUUsRUFBRTtZQUNkLGVBQWUsRUFBRSxJQUFJO1NBQ3hCLENBQUM7UUFDRix3Q0FBd0M7UUFDaEMs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QUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDbEU7UUFFRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtZQUNWLHlDQUF5QztZQUN6QyxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN0RTtRQUVELGdCQUFnQjtRQUNoQixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOztBQTNWTSxzQkFBWSxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIGZyb21FdmVudCwgbWVyZ2UsIHBpcGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlLCBtYXAsIGZpbHRlciwgdGFwLCBzd2l0Y2hNYXAsIHRha2VVbnRpbCwgdGFrZSwgc2tpcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgRHJhZ2dhYmxlRXZlbnQgfSBmcm9tICcuL0RyYWdnYWJsZUV2ZW50JztcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBEcmFnZ2FibGUge1xuICAgIHN0YXRpYyBTQ1JPTExfU1BFRUQgPSAyMDtcbiAgICBlbGVtZW50OiBFbGVtZW50O1xuXG4gICAgZHJhZ1N0YXJ0OiBPYnNlcnZhYmxlPERyYWdnYWJsZUV2ZW50PjtcbiAgICBkcmFnTW92ZTogT2JzZXJ2YWJsZTxEcmFnZ2FibGVFdmVudD47XG4gICAgZHJhZ1N0b3A6IE9ic2VydmFibGU8RHJhZ2dhYmxlRXZlbnQ+O1xuICAgIC8vIEEgc2ltcGxlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBwb2x5ZmlsbFxuICAgIHByaXZhdGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBGdW5jdGlvbjtcbiAgICBwcml2YXRlIGNhbmNlbEFuaW1hdGlvbkZyYW1lOiBGdW5jdGlvbjtcbiAgICBwcml2YXRlIG1vdXNlbW92ZTogT2JzZXJ2YWJsZTx7fSB8IEV2ZW50PiA9IG1lcmdlKFxuICAgICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZW1vdmUnKSxcbiAgICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAndG91Y2htb3ZlJywgeyBwYXNzaXZlOiBmYWxzZSB9KVxuICAgICkucGlwZShzaGFyZSgpKTtcbiAgICBwcml2YXRlIG1vdXNldXA6IE9ic2VydmFibGU8e30gfCBFdmVudD4gPSBtZXJnZShcbiAgICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCAnbW91c2V1cCcpLFxuICAgICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICd0b3VjaGVuZCcpLFxuICAgICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICd0b3VjaGNhbmNlbCcpXG4gICAgKS5waXBlKHNoYXJlKCkpO1xuICAgIHByaXZhdGUgbW91c2Vkb3duOiBPYnNlcnZhYmxlPHt9IHwgRXZlbnQ+O1xuICAgIHByaXZhdGUgY29uZmlnID0ge1xuICAgICAgICBoYW5kbGVyQ2xhc3M6IG51bGwsXG4gICAgICAgIHNjcm9sbDogdHJ1ZSxcbiAgICAgICAgc2Nyb2xsRWRnZTogMzYsXG4gICAgICAgIHNjcm9sbERpcmVjdGlvbjogbnVsbFxuICAgIH07XG4gICAgLy8gcmVmZXJlbmNlIHRvIGF1dG8gc2Nyb2xsaW5nIGxpc3RlbmVyc1xuICAgIHByaXZhdGUgYXV0b1Njcm9sbGluZ0ludGVydmFsID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50LCBjb25maWcgPSB7fSkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLm1vdXNlZG93biA9IG1lcmdlKFxuICAgICAgICAgICAgZnJvbUV2ZW50KGVsZW1lbnQsICdtb3VzZWRvd24nKSxcbiAgICAgICAgICAgIGZyb21FdmVudChlbGVtZW50LCAndG91Y2hzdGFydCcpXG4gICAgICAgICkucGlwZShzaGFyZSgpKTtcblxuICAgICAgICB0aGlzLmNvbmZpZyA9IHsgLi4udGhpcy5jb25maWcsIC4uLmNvbmZpZyB9O1xuXG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0ID0gdGhpcy5jcmVhdGVEcmFnU3RhcnRPYnNlcnZhYmxlKCkucGlwZShzaGFyZSgpKTtcbiAgICAgICAgdGhpcy5kcmFnTW92ZSA9IHRoaXMuY3JlYXRlRHJhZ01vdmVPYnNlcnZhYmxlKHRoaXMuZHJhZ1N0YXJ0KTtcbiAgICAgICAgdGhpcy5kcmFnU3RvcCA9IHRoaXMuY3JlYXRlRHJhZ1N0b3BPYnNlcnZhYmxlKHRoaXMuZHJhZ1N0YXJ0KTtcblxuICAgICAgICB0aGlzLmZpeFByb2JsZW1XaXRoRG5ERm9ySUUoZWxlbWVudCk7XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPVxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAoY2FsbGJhY2sgPT4gc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKSk7XG4gICAgICAgIHRoaXMuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgKGNhZklEID0+IGNsZWFyVGltZW91dChjYWZJRCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlRHJhZ1N0YXJ0T2JzZXJ2YWJsZSgpOiBPYnNlcnZhYmxlPERyYWdnYWJsZUV2ZW50PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdXNlZG93bi5waXBlKFxuICAgICAgICAgICAgbWFwKG1kID0+IG5ldyBEcmFnZ2FibGVFdmVudChtZCkpLFxuICAgICAgICAgICAgZmlsdGVyKChldmVudDogRHJhZ2dhYmxlRXZlbnQpID0+IHRoaXMuaXNEcmFnaW5nQnlIYW5kbGVyKGV2ZW50KSksXG4gICAgICAgICAgICB0YXAoZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlLmlzVG91Y2hFdmVudCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucGF1c2VFdmVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAoPGFueT5kb2N1bWVudC5hY3RpdmVFbGVtZW50KS5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHByZXZlbnRzIHJlbmRlcmluZyBwZXJmb3JtYW5jZSBpc3N1ZXMgd2hpbGUgZHJhZ2dpbmcgaXRlbSB3aXRoIHNlbGVjdGlvbiBpbnNpZGVcbiAgICAgICAgICAgICAgICB1dGlscy5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKHN0YXJ0RXZlbnQ6IERyYWdnYWJsZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW91c2Vtb3ZlLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIG1hcChtbSA9PiBuZXcgRHJhZ2dhYmxlRXZlbnQobW0pKSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyKChtb3ZlRXZlbnQ6IERyYWdnYWJsZUV2ZW50KSA9PiB0aGlzLmluUmFuZ2Uoc3RhcnRFdmVudCwgbW92ZUV2ZW50LCA1KSksXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoKSA9PiBzdGFydEV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMubW91c2V1cCksXG4gICAgICAgICAgICAgICAgICAgIHRha2UoMSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZURyYWdNb3ZlT2JzZXJ2YWJsZShcbiAgICAgICAgZHJhZ1N0YXJ0OiBPYnNlcnZhYmxlPERyYWdnYWJsZUV2ZW50PlxuICAgICk6IE9ic2VydmFibGU8RHJhZ2dhYmxlRXZlbnQ+IHtcbiAgICAgICAgcmV0dXJuIGRyYWdTdGFydC5waXBlKFxuICAgICAgICAgICAgdGFwKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRvdWNoQWN0aW9uTm9uZShldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzd2l0Y2hNYXAoc3RhcnRFdmVudCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW91c2Vtb3ZlLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIHNraXAoMSksXG4gICAgICAgICAgICAgICAgICAgIG1hcChtbSA9PiBuZXcgRHJhZ2dhYmxlRXZlbnQobW0pKSxcbiAgICAgICAgICAgICAgICAgICAgdGFwKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnBhdXNlRXZlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RXZlbnQucGF1c2VFdmVudCgpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMubW91c2V1cClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmaWx0ZXIodmFsID0+ICEhdmFsKSxcbiAgICAgICAgICAgIHRhcCgoZXZlbnQ6IERyYWdnYWJsZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNjcm9sbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0U2Nyb2xsKHRoaXMuZWxlbWVudCwgZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVEcmFnU3RvcE9ic2VydmFibGUoZHJhZ1N0YXJ0OiBPYnNlcnZhYmxlPERyYWdnYWJsZUV2ZW50Pik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiBkcmFnU3RhcnQucGlwZShcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW91c2V1cC5waXBlKHRha2UoMSkpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtYXAoZSA9PiBuZXcgRHJhZ2dhYmxlRXZlbnQoZSkpLFxuICAgICAgICAgICAgdGFwKGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVRvdWNoQWN0aW9uTm9uZShlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYXV0b1Njcm9sbGluZ0ludGVydmFsLmZvckVhY2gocmFmID0+IHRoaXMuY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhcnRTY3JvbGwoaXRlbTogRWxlbWVudCwgZXZlbnQ6IERyYWdnYWJsZUV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbENvbnRhaW5lciA9IHRoaXMuZ2V0U2Nyb2xsQ29udGFpbmVyKGl0ZW0pO1xuICAgICAgICB0aGlzLmF1dG9TY3JvbGxpbmdJbnRlcnZhbC5mb3JFYWNoKHJhZiA9PiB0aGlzLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZikpO1xuXG4gICAgICAgIGlmIChzY3JvbGxDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTY3JvbGxGb3JDb250YWluZXIoZXZlbnQsIHNjcm9sbENvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0U2Nyb2xsRm9yV2luZG93KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhcnRTY3JvbGxGb3JDb250YWluZXIoZXZlbnQ6IERyYWdnYWJsZUV2ZW50LCBzY3JvbGxDb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5jb25maWcuc2Nyb2xsRGlyZWN0aW9uIHx8IHRoaXMuY29uZmlnLnNjcm9sbERpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgdGhpcy5zdGFydFNjcm9sbFZlcnRpY2FsbHlGb3JDb250YWluZXIoZXZlbnQsIHNjcm9sbENvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLnNjcm9sbERpcmVjdGlvbiB8fCB0aGlzLmNvbmZpZy5zY3JvbGxEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgdGhpcy5zdGFydFNjcm9sbEhvcml6b250YWxseUZvckNvbnRhaW5lcihldmVudCwgc2Nyb2xsQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhcnRTY3JvbGxWZXJ0aWNhbGx5Rm9yQ29udGFpbmVyKFxuICAgICAgICBldmVudDogRHJhZ2dhYmxlRXZlbnQsXG4gICAgICAgIHNjcm9sbENvbnRhaW5lcjogSFRNTEVsZW1lbnRcbiAgICApOiB2b2lkIHtcbiAgICAgICAgaWYgKGV2ZW50LnBhZ2VZIC0gdGhpcy5nZXRPZmZzZXQoc2Nyb2xsQ29udGFpbmVyKS50b3AgPCB0aGlzLmNvbmZpZy5zY3JvbGxFZGdlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0QXV0b1Njcm9sbGluZyhzY3JvbGxDb250YWluZXIsIC1EcmFnZ2FibGUuU0NST0xMX1NQRUVELCAnc2Nyb2xsVG9wJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLmdldE9mZnNldChzY3JvbGxDb250YWluZXIpLnRvcCArXG4gICAgICAgICAgICAgICAgc2Nyb2xsQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAtXG4gICAgICAgICAgICAgICAgZXZlbnQucGFnZVkgPFxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2Nyb2xsRWRnZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBdXRvU2Nyb2xsaW5nKHNjcm9sbENvbnRhaW5lciwgRHJhZ2dhYmxlLlNDUk9MTF9TUEVFRCwgJ3Njcm9sbFRvcCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydFNjcm9sbEhvcml6b250YWxseUZvckNvbnRhaW5lcihcbiAgICAgICAgZXZlbnQ6IERyYWdnYWJsZUV2ZW50LFxuICAgICAgICBzY3JvbGxDb250YWluZXI6IEhUTUxFbGVtZW50XG4gICAgKTogdm9pZCB7XG4gICAgICAgIGlmIChldmVudC5wYWdlWCAtIHNjcm9sbENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IDwgdGhpcy5jb25maWcuc2Nyb2xsRWRnZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEF1dG9TY3JvbGxpbmcoc2Nyb2xsQ29udGFpbmVyLCAtRHJhZ2dhYmxlLlNDUk9MTF9TUEVFRCwgJ3Njcm9sbExlZnQnKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMuZ2V0T2Zmc2V0KHNjcm9sbENvbnRhaW5lcikubGVmdCArXG4gICAgICAgICAgICAgICAgc2Nyb2xsQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC1cbiAgICAgICAgICAgICAgICBldmVudC5wYWdlWCA8XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zY3JvbGxFZGdlXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEF1dG9TY3JvbGxpbmcoc2Nyb2xsQ29udGFpbmVyLCBEcmFnZ2FibGUuU0NST0xMX1NQRUVELCAnc2Nyb2xsTGVmdCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydFNjcm9sbEZvcldpbmRvdyhldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLnNjcm9sbERpcmVjdGlvbiB8fCB0aGlzLmNvbmZpZy5zY3JvbGxEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTY3JvbGxWZXJ0aWNhbGx5Rm9yV2luZG93KGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5jb25maWcuc2Nyb2xsRGlyZWN0aW9uIHx8IHRoaXMuY29uZmlnLnNjcm9sbERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0U2Nyb2xsSG9yaXpvbnRhbGx5Rm9yV2luZG93KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhcnRTY3JvbGxWZXJ0aWNhbGx5Rm9yV2luZG93KGV2ZW50OiBEcmFnZ2FibGVFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBzY3JvbGxpbmdFbGVtZW50ID1cbiAgICAgICAgICAgIGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG5cbiAgICAgICAgLy8gTk9URTogVXNpbmcgYHdpbmRvdy5wYWdlWU9mZnNldGAgaGVyZSBiZWNhdXNlIElFIGRvZXNuJ3QgaGF2ZSBgd2luZG93LnNjcm9sbFlgLlxuICAgICAgICBpZiAoZXZlbnQucGFnZVkgLSB3aW5kb3cucGFnZVlPZmZzZXQgPCB0aGlzLmNvbmZpZy5zY3JvbGxFZGdlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0QXV0b1Njcm9sbGluZyhzY3JvbGxpbmdFbGVtZW50LCAtRHJhZ2dhYmxlLlNDUk9MTF9TUEVFRCwgJ3Njcm9sbFRvcCcpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IC0gKGV2ZW50LnBhZ2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0KSA8XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zY3JvbGxFZGdlXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEF1dG9TY3JvbGxpbmcoc2Nyb2xsaW5nRWxlbWVudCwgRHJhZ2dhYmxlLlNDUk9MTF9TUEVFRCwgJ3Njcm9sbFRvcCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydFNjcm9sbEhvcml6b250YWxseUZvcldpbmRvdyhldmVudDogRHJhZ2dhYmxlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2Nyb2xsaW5nRWxlbWVudCA9XG4gICAgICAgICAgICBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xuXG4gICAgICAgIC8vIE5PVEU6IFVzaW5nIGB3aW5kb3cucGFnZVhPZmZzZXRgIGhlcmUgYmVjYXVzZSBJRSBkb2Vzbid0IGhhdmUgYHdpbmRvdy5zY3JvbGxYYC5cbiAgICAgICAgaWYgKGV2ZW50LnBhZ2VYIC0gd2luZG93LnBhZ2VYT2Zmc2V0IDwgdGhpcy5jb25maWcuc2Nyb2xsRWRnZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEF1dG9TY3JvbGxpbmcoc2Nyb2xsaW5nRWxlbWVudCwgLURyYWdnYWJsZS5TQ1JPTExfU1BFRUQsICdzY3JvbGxMZWZ0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCAtIChldmVudC5wYWdlWCAtIHdpbmRvdy5wYWdlWE9mZnNldCkgPFxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2Nyb2xsRWRnZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBdXRvU2Nyb2xsaW5nKHNjcm9sbGluZ0VsZW1lbnQsIERyYWdnYWJsZS5TQ1JPTExfU1BFRUQsICdzY3JvbGxMZWZ0Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNjcm9sbENvbnRhaW5lcihub2RlKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBub2RlT3V0ZXJIZWlnaHQgPSB1dGlscy5nZXRFbGVtZW50T3V0ZXJIZWlnaHQobm9kZSk7XG5cbiAgICAgICAgaWYgKG5vZGUuc2Nyb2xsSGVpZ2h0ID4gTWF0aC5jZWlsKG5vZGVPdXRlckhlaWdodCkpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFuZXcgUmVnRXhwKCcoYm9keXxodG1sKScsICdpJykudGVzdChub2RlLnBhcmVudE5vZGUudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbENvbnRhaW5lcihub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydEF1dG9TY3JvbGxpbmcobm9kZSwgYW1vdW50LCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5hdXRvU2Nyb2xsaW5nSW50ZXJ2YWwucHVzaChcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0QXV0b1Njcm9sbGluZyhub2RlLCBhbW91bnQsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIChub2RlW2RpcmVjdGlvbl0gKz0gYW1vdW50ICogMC4yNSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRPZmZzZXQoZWwpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgdGhpcy5nZXRTY3JvbGwoJ3Njcm9sbExlZnQnLCAncGFnZVhPZmZzZXQnKSxcbiAgICAgICAgICAgIHRvcDogcmVjdC50b3AgKyB0aGlzLmdldFNjcm9sbCgnc2Nyb2xsVG9wJywgJ3BhZ2VZT2Zmc2V0JylcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNjcm9sbChzY3JvbGxQcm9wLCBvZmZzZXRQcm9wKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93W29mZnNldFByb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvd1tvZmZzZXRQcm9wXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtzY3JvbGxQcm9wXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keVtzY3JvbGxQcm9wXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRHJhZ2luZ0J5SGFuZGxlcihldmVudDogRHJhZ2dhYmxlRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWREcmFnSGFuZGxlcihldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgIXRoaXMuY29uZmlnLmhhbmRsZXJDbGFzcyB8fFxuICAgICAgICAgICAgKHRoaXMuY29uZmlnLmhhbmRsZXJDbGFzcyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuaGFzRWxlbWVudFdpdGhDbGFzcyh0aGlzLmNvbmZpZy5oYW5kbGVyQ2xhc3MsIGV2ZW50LnRhcmdldCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1ZhbGlkRHJhZ0hhbmRsZXIodGFyZ2V0RWw6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gWydpbnB1dCcsICd0ZXh0YXJlYSddLmluZGV4T2YodGFyZ2V0RWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTE7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpblJhbmdlKHN0YXJ0RXZlbnQ6IERyYWdnYWJsZUV2ZW50LCBtb3ZlRXZlbnQ6IERyYWdnYWJsZUV2ZW50LCByYW5nZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBNYXRoLmFicyhtb3ZlRXZlbnQuY2xpZW50WCAtIHN0YXJ0RXZlbnQuY2xpZW50WCkgPiByYW5nZSB8fFxuICAgICAgICAgICAgTWF0aC5hYnMobW92ZUV2ZW50LmNsaWVudFkgLSBzdGFydEV2ZW50LmNsaWVudFkpID4gcmFuZ2VcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc0VsZW1lbnRXaXRoQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcsIHRhcmdldDogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIHdoaWxlICh0YXJnZXQgIT09IHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGF1c2VFdmVudChlOiBFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoZS5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpeFByb2JsZW1XaXRoRG5ERm9ySUUoZWxlbWVudDogRWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5pc1RvdWNoRGV2aWNlKCkgJiYgdGhpcy5pc0lFb3JFZGdlKCkgJiYgKDxIVE1MRWxlbWVudD5lbGVtZW50KS5zdHlsZSkge1xuICAgICAgICAgICAgKDxIVE1MRWxlbWVudD5lbGVtZW50KS5zdHlsZVsndG91Y2gtYWN0aW9uJ10gPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZVRvdWNoQWN0aW9uTm9uZShlbGVtZW50OiBFbGVtZW50KSB7XG4gICAgICAgIGlmICghKDxIVE1MRWxlbWVudD5lbGVtZW50KS5zdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgICg8SFRNTEVsZW1lbnQ+ZWxlbWVudCkuc3R5bGVbJ3RvdWNoLWFjdGlvbiddID0gJyc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRUb3VjaEFjdGlvbk5vbmUoZWxlbWVudCkge1xuICAgICAgICBpZiAoISg8SFRNTEVsZW1lbnQ+ZWxlbWVudCkuc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAoPEhUTUxFbGVtZW50PmVsZW1lbnQpLnN0eWxlWyd0b3VjaC1hY3Rpb24nXSA9ICdub25lJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzVG91Y2hEZXZpY2UoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIC8vIHdvcmtzIG9uIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgKTsgLy8gd29ya3Mgb24gSUUxMC8xMSBhbmQgU3VyZmFjZVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNJRW9yRWRnZSgpIHtcbiAgICAgICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICAgICAgICBjb25zdCBtc2llID0gdWEuaW5kZXhPZignTVNJRSAnKTtcbiAgICAgICAgaWYgKG1zaWUgPiAwKSB7XG4gICAgICAgICAgICAvLyBJRSAxMCBvciBvbGRlciA9PiByZXR1cm4gdmVyc2lvbiBudW1iZXJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcobXNpZSArIDUsIHVhLmluZGV4T2YoJy4nLCBtc2llKSksIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRyaWRlbnQgPSB1YS5pbmRleE9mKCdUcmlkZW50LycpO1xuICAgICAgICBpZiAodHJpZGVudCA+IDApIHtcbiAgICAgICAgICAgIC8vIElFIDExID0+IHJldHVybiB2ZXJzaW9uIG51bWJlclxuICAgICAgICAgICAgY29uc3QgcnYgPSB1YS5pbmRleE9mKCdydjonKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcocnYgKyAzLCB1YS5pbmRleE9mKCcuJywgcnYpKSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZWRnZSA9IHVhLmluZGV4T2YoJ0VkZ2UvJyk7XG4gICAgICAgIGlmIChlZGdlID4gMCkge1xuICAgICAgICAgICAgLy8gRWRnZSAoSUUgMTIrKSA9PiByZXR1cm4gdmVyc2lvbiBudW1iZXJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcoZWRnZSArIDUsIHVhLmluZGV4T2YoJy4nLCBlZGdlKSksIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG90aGVyIGJyb3dzZXJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==